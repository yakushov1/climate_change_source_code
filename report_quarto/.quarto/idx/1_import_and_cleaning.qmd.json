{"title":"Импорт и очистка данных метеостанции п. Бахта. Расчет среднесуточных и среднемесячных значений","markdown":{"yaml":{"title":"Импорт и очистка данных метеостанции п. Бахта. Расчет среднесуточных и среднемесячных значений","author":"Vasily Yakishov","format":{"html":{"code-fold":true,"code-tools":true}}},"headingText":"Шаг 1: Загрузим необходимые пакеты","containsRefs":false,"markdown":"\n\nМетеостанция п. Бахта - ближайшая к интересующему месту. Данные были получены из открытых источников, таких как [rp5](https://rp5.ru/) (2005-2023 годы, 1 измерение раз в 3 часа), а также предоставлены [Мировым центром данных Всероссийского научно-исследовательского института гидрометеорологической информации](http://meteo.ru/) (суточное разрешение).\n\n\n```{r}\n#| label: загрузка пакетов\n#| warning: false\n#| \n\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(plotly)\nlibrary(VIM) # использовал для визуализации пропусков\nlibrary(imputeTS) # Для интерполяции пропусков\n\n\n```\n\n### Шаг 2: Объявим кастомные функции.\n\n**read_files** - функция, которая:\n\n1.  считывает файлы excel, полученные с сайта rp5\n\n2.  разбивает столбец со временем на отдельные столбцы (год, месяц, день)\n\n3.  отбирает необходимые для дальнейшего анализа столбцы:\\\n    *Year* - Год\\\n    *Month* - месяц\\\n    *Day* - день\\\n    *Tavg* - температура\\\n    *Pr* - количество осадков\\\n    *Sn* - глубина снежного покрова\\\n    *Sn_description* - описание снежного покрова\n\n4.  очищает столбец *Pr* от строковых значений\n\n5.  производит преобразование типов столбцов, где это необходимо\n\n6.  Вычисляет среднесуточные значения температур и глубин снежного покрова, а также сумму осадков. *Sn_desription* - описание снежного покрова делается несколько раз в сутки, но не каждые 3 часа, поэтому многие строки содержат пропущенные значения. Функция объединяет все наблюдения в 1, перечисляя их через запятую.\n\n```{r}\n#| label: Функция считывания файлов\n#| warning: false\nread_files <- function(x){\n  df <- read_excel(x) |>  \n    mutate(Local_time = as_datetime(Local_time, format = \"%d.%m.%Y %R\")) |> \n    mutate(Year = year(Local_time),\n           Month = as.factor(month(Local_time)),\n           Day = mday(Local_time)) |> \n    select(Year, Month, Day, Tavg=T, Pr=RRR, Sn=sss, Sn_description = `E'`) |> \n    mutate(Pr = case_when(Pr == \"Осадков нет\" | Pr == \"Следы осадков\" ~ \"0\",\n                          .default = Pr)) |> \n    arrange(Year, Month, Day) |>\n    mutate(across(c(Year:Day, Sn_description), as.factor),\n           across(Tavg:Sn, as.numeric)) |> \n    group_by(Year, Month, Day) |>\n    summarise(\n      Tavg = mean(Tavg, na.rm = T),\n      Pr = sum(Pr, na.rm = T), # Потому что это накопленные осадки, нужно суммировать\n      Sn = mean(Sn, na.rm = T),\n      Sn_description = as.factor(str_flatten(Sn_description, \", \", na.rm = T))\n    )\n  return(df)\n}\n```\n\n**interactive_graph** - функция, которая принимает на вход следующие аргументы:\\\n*df* - необходимый датафрейм\\\n*parametr* - столбец, который будет отображен на графике\\\n*title* - строка-заголовок графика\\\nНа выходе - интерактивный график, построенный с помощью пакета plotly\n\n```{r}\n#| label: Функция построения интерактивного графика\n#| warning: false\ninteractive_graph <- function(df, parametr, title) {\n  plot_ly(df, type = \"scatter\", mode = \"lines\") |>\n    add_trace(x = ~Date, y = ~df[[parametr]], name = title) |>\n    layout(\n      showlegend = F, title = title,\n      xaxis = list(rangeslider = list(visible = T))\n    )\n}\n\n```\n\n### Шаг 3: Импорт данных\n\nДанные, предоставленные Мировым центром данных (МЦД) и rp5 имеют различный формат, поэтому загрузим их отдельно друг от друга. Из МЦД было получено 2 файла: с данными о температуре и осадках и, второй, с данными о снежном покрове. Загрузим их, отберем необходимые столбцы и объединим в один датафрейм:\n\n```{r}\n#| label: Загрузка данных из Мирового центра данных\n#| warning: false\n\nobninsk_temperature <- read_excel(\"../initial_data/climate/1961_2005/23776_TTTR.xlsx\") |>\n  select(\n    Year = год,\n    Month = месяц,\n    Day = день,\n    Tavg = Тср,\n    Pr = осадки\n  )\n\nobninsk_snow <- read.csv2(\"../initial_data/climate/1961_2005/23776_snow.csv\", fileEncoding = \"windows-1251\") |>\n  select(\n    Station = Станция,\n    Year = Год,\n    Month = Месяц,\n    Day = День,\n    Sn = Высота_снежного_покрова,\n    Sn_description = Снежный_покров_.степень_покрытия\n  )\nobninsk <- obninsk_temperature |>\n  left_join(obninsk_snow, by = c(\"Year\", \"Month\", \"Day\")) |>\n  select(-Station) |> \n  filter(Year<2005 | (Year==2005 & Month == 1))\n```\n\nНа всякий случай проверим, нет ли избыточных строк в какой-либо год?\n\n```{r}\n#| label: Проверка на избыточные строки\n#| warning: false\n\nnrow(obninsk |> \n  group_by(Year) |> \n  summarise(N = n()) |> \n  filter(N>366)) == 0 #Все годы нормальной продолжительности\n\nrm(obninsk_snow, obninsk_temperature) # удалим промежуточные переменные\n\n\n```\n\nТеперь загрузим данные, полученные с rp5.ru, и объединим их с данными из МЦД и снова проверим, нет ли лишних строк? (то есть все годы должны быть \"нормальной\" продолжительности)\n\n```{r}\n#| label: Загрузка данных из rp5 и объединение с МЦД\n#| warning: false\n# Данные rp5.ru -----------------------------------------------------------\npaths <- list.files(\"../initial_data/climate/2005_2023\", pattern = \"[.]xls$\", full.names = TRUE) # Просканировали все файлы в директории\n\nrp5 <- paths |> \n  map_df(read_files) # объединили в 1 датафрейм все загруженные файлы\n\nrm(paths)\n\n# Объединенные данные -----------------------------------------------------\nclimate <- rbind(obninsk, rp5)\nnrow(climate |> \n  group_by(Year) |> \n  summarise(N = n()) |> \n  filter(N>366))==0 #Все годы нормальной продолжительности\n\nrm(obninsk, rp5)\n\n```\n\n### Шаг 4: Очистка данных суточного разрешения.\n\nПроверим данные на наличие пропусков\n\n```{r}\n#| label: Проверка на пропуски\n#| warning: false\nsummary(climate) # 271 пропуск средней температуры, 3423 пропуса снега, 1458 пропуск осадков\n```\n\nУдобно визуализировать пропуски с помощью пакета VIM\n\n```{r}\n#| label: Визуализация пропусков\n#| warning: false\naggr(climate, prop = F, numbers = T) # Визуализация пропусков из пакета VIM\n```\n\nРаботаем с пропусками следующим образом:\n\nЕсли Sn=9999.0, его надо заменить на NA\\\nСнега в летние месяцы быть не может\\\nЕсли осадки NA, а снег и температура не пропущены, то, скорее всего, осадков не было (=0)\\\nОставшиеся пропуски удалим методом линейной интерполяции (замена с помощью уравнения линейной регрессии y = kx+b) (na_interpolation из пакета imputeTS)\n\n```{r}\n#| label: Очистка пропусков\n#| warning: false\n\nclimate <- climate |> \n  mutate(Sn = case_when(\n    Sn == 9999 ~ NA,\n    Sn == \"NaN\" ~ NA,\n    .default = Sn\n  )) |> \n  mutate(Sn = case_when(\n    Month %in% c(6:8) & is.na(Sn) ~ 0,\n    .default = Sn\n  )) |> \n  mutate(Pr = case_when(\n    is.na(Pr) & is.na(Tavg) == F & is.na(Sn) == F ~ 0,\n    .default = Pr\n  )) |> \n  mutate(across(Tavg:Sn, na_interpolation))\n```\n\nПроверим, что получилось\n\n```{r}\n#| label: Проверка\n#| warning: false\nsummary(climate)\naggr(climate, prop = F, numbers = T)\n```\n\nОтлично, пропуски очищены.\n\n### Шаг 5: Проверка на выбросы\n\nДля средних температур есть проблемы с летними месяцами с 1966 по 1976 годы\n\n```{r}\n#| label: Проверка данных о температуре на выбросы\n\nclimate <- climate |>\n  mutate(Date = make_date(Year, Month, Day)) # датафрейм с датами в формате дат,чтобы plot_ly смог построить интерактивный график\n\ninteractive_graph(climate, parametr = 'Tavg', \"Temperature\") \n```\n\nПроверка данных об осадках на выбросы: выбросы есть\n\n```{r}\n#| label: Проверка данных об осадках на выбросы\ninteractive_graph(climate, parametr = 'Pr', \"Precipitations\") # Есть выбросы\n```\n\nСовсем нереальные пики заменил значениями, похожими на соседние\n\n```{r}\n#| label: Проверка данных об осадках на выбросы после очистки\nclimate <- climate |> \n  mutate(Pr = case_when(\n    Pr %in% c(204.3, 202) ~ 3,\n    Pr == 813 ~ 2,\n    .default = Pr\n  ))\ninteractive_graph(climate, parametr = 'Pr', \"Precipitations\") # стало лучше\n```\n\nСо снегом более-менее нормально.\\\nСлучайные пропуски не появились.\\\nСохраняем предобработанный файл с информацией суточного разрешения\n\n```{r}\n#| label: Проверка данных о глубине снежного покрова на выбросы\ninteractive_graph(climate, parametr= 'Sn', \"Snow depth\")\n\naggr(climate, prop = F, numbers = T) # Пропусков больше нет\n\n#write_csv2(climate, \"../initial_data/climate/cleaned/Bakhta_daily_problem_with_summer_1966-1976.csv\")\n```\n\n### Шаг 6. Расчет среднемесячных температур для метеостанции п. Бахта\n\nВидим, что есть проблемы с летними месяцами\n\n```{r}\n#| label: Среднемесячные температуры в Бахте\n#| warning: false\n\nBakhta_monthly <- climate |>\n  group_by(Year, Month) |>\n  summarise(across(c(Tavg, Sn), mean),\n            Pr = sum(Pr)) |> # Накопленное количество осадков\n  mutate(across(is.character, as.numeric)) |> \n  arrange(Year, Month) |> \n  mutate(Date = make_date(Year, Month))\n\ninteractive_graph(Bakhta_monthly, \"Tavg\", \"Temperature\")\n```\n\nЗагрузим данные о среднемесячных температурах с метеостанций п. Бор и Верхнеимбатск. Это ближайшие к Бахте метеостанции.\\\nПостроим график и сохраним данные месячного разрешения в отдельный файл для последующего анализа.\n\n```{r}\n#| label:  Бор и Верхнеимбатск месячные данные\nBor_monthly <- read_delim(\"../initial_data/climate/monthly/Bor_monthly.txt\",\n  delim = \";\", col_types = \"n\",\n  col_names = c(\"Station\", \"Year\", 1:12)) |> \n  select(-Station) |> \n  mutate_all(as.numeric) |> \n  pivot_longer(cols = -c(Year), names_to = \"Month\", values_to = \"Tavg\") |> \n  mutate(Date = make_date(Year, Month))\n\ninteractive_graph(Bor_monthly, parametr = 'Tavg', \"Temperature in Bor\")\n\nVerkhneimbatsk_monthly <- read_delim(\"../initial_data/climate/monthly/Verkhneimbatsk_monthly.txt\",\n  delim = \";\", col_types = \"n\",\n  col_names = c(\"Station\", \"Year\", 1:12)) |> \n  select(-Station) |> \n  mutate_all(as.numeric) |> \n  pivot_longer(cols = -c(Year), names_to = \"Month\", values_to = \"Tavg\") |> \n  mutate(Date = make_date(Year, Month))\n\ninteractive_graph(Verkhneimbatsk_monthly, parametr = 'Tavg', \"Temperature in Verkhneimbatsk\")\n\n```\n\nС ними более-менее все в порядке.\\\nПоэтому заменим данные за июнь-сентябрь 1966-1976 гг. в Бахте на осредненные по Бору и Верхнеимбатску, сохраним данные в отдельный файл для дальнейшего анализа.\n\n```{r}\n#| label: 1966-1976 Бахта замена на оср Бор - Верхнеимбатск \n#| warning: false\n\nBor_Verkhn <- Bor_monthly |>\n  left_join(Verkhneimbatsk_monthly, by = c(\"Year\", \"Month\")) |>\n  select(Year, Month, Bor_tavg = Tavg.x, Verkhn_tavg = Tavg.y) |>\n  filter(Year %in% c(1966:1976), Month %in% c(6:9)) |>\n  mutate(across(c(Year, Month), as.integer)) |> \n  group_by(Year, Month) |>\n  summarise(Tavg = mean(Bor_tavg, Verkhn_tavg))\n\nBakhta_monthly_new <- Bakhta_monthly |>\n  ungroup() |> \n  mutate(across(c(Year, Month), as.integer)) |> \n  left_join(Bor_Verkhn, by = c(\"Year\", \"Month\")) |>\n  mutate(Tavg = ifelse(is.na(Tavg.y) == F, Tavg.y, Tavg.x)) |>\n  select(Year, Month, Tavg, Sn, Pr, Date)\n\n\n# График среднемесячных температур в Бахте (1966-1976гг 6-8 мес заменены на оср Бор-Верхнеимбатск)\ninteractive_graph(Bakhta_monthly_new, \"Tavg\", \"Temperature in Bakhta\")\n\nrm(Bor_monthly, Bor_Verkhn, Verkhneimbatsk_monthly, climate)\n\n#write_csv2(Bakhta_monthly_new, \"../initial_data/climate/cleaned/Bakhta_monthly_1966-1976_replaced_by_average_Bor_Verkhn.csv\")\n\n\n\n```\n","srcMarkdownNoYaml":"\n\nМетеостанция п. Бахта - ближайшая к интересующему месту. Данные были получены из открытых источников, таких как [rp5](https://rp5.ru/) (2005-2023 годы, 1 измерение раз в 3 часа), а также предоставлены [Мировым центром данных Всероссийского научно-исследовательского института гидрометеорологической информации](http://meteo.ru/) (суточное разрешение).\n\n### Шаг 1: Загрузим необходимые пакеты\n\n```{r}\n#| label: загрузка пакетов\n#| warning: false\n#| \n\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(plotly)\nlibrary(VIM) # использовал для визуализации пропусков\nlibrary(imputeTS) # Для интерполяции пропусков\n\n\n```\n\n### Шаг 2: Объявим кастомные функции.\n\n**read_files** - функция, которая:\n\n1.  считывает файлы excel, полученные с сайта rp5\n\n2.  разбивает столбец со временем на отдельные столбцы (год, месяц, день)\n\n3.  отбирает необходимые для дальнейшего анализа столбцы:\\\n    *Year* - Год\\\n    *Month* - месяц\\\n    *Day* - день\\\n    *Tavg* - температура\\\n    *Pr* - количество осадков\\\n    *Sn* - глубина снежного покрова\\\n    *Sn_description* - описание снежного покрова\n\n4.  очищает столбец *Pr* от строковых значений\n\n5.  производит преобразование типов столбцов, где это необходимо\n\n6.  Вычисляет среднесуточные значения температур и глубин снежного покрова, а также сумму осадков. *Sn_desription* - описание снежного покрова делается несколько раз в сутки, но не каждые 3 часа, поэтому многие строки содержат пропущенные значения. Функция объединяет все наблюдения в 1, перечисляя их через запятую.\n\n```{r}\n#| label: Функция считывания файлов\n#| warning: false\nread_files <- function(x){\n  df <- read_excel(x) |>  \n    mutate(Local_time = as_datetime(Local_time, format = \"%d.%m.%Y %R\")) |> \n    mutate(Year = year(Local_time),\n           Month = as.factor(month(Local_time)),\n           Day = mday(Local_time)) |> \n    select(Year, Month, Day, Tavg=T, Pr=RRR, Sn=sss, Sn_description = `E'`) |> \n    mutate(Pr = case_when(Pr == \"Осадков нет\" | Pr == \"Следы осадков\" ~ \"0\",\n                          .default = Pr)) |> \n    arrange(Year, Month, Day) |>\n    mutate(across(c(Year:Day, Sn_description), as.factor),\n           across(Tavg:Sn, as.numeric)) |> \n    group_by(Year, Month, Day) |>\n    summarise(\n      Tavg = mean(Tavg, na.rm = T),\n      Pr = sum(Pr, na.rm = T), # Потому что это накопленные осадки, нужно суммировать\n      Sn = mean(Sn, na.rm = T),\n      Sn_description = as.factor(str_flatten(Sn_description, \", \", na.rm = T))\n    )\n  return(df)\n}\n```\n\n**interactive_graph** - функция, которая принимает на вход следующие аргументы:\\\n*df* - необходимый датафрейм\\\n*parametr* - столбец, который будет отображен на графике\\\n*title* - строка-заголовок графика\\\nНа выходе - интерактивный график, построенный с помощью пакета plotly\n\n```{r}\n#| label: Функция построения интерактивного графика\n#| warning: false\ninteractive_graph <- function(df, parametr, title) {\n  plot_ly(df, type = \"scatter\", mode = \"lines\") |>\n    add_trace(x = ~Date, y = ~df[[parametr]], name = title) |>\n    layout(\n      showlegend = F, title = title,\n      xaxis = list(rangeslider = list(visible = T))\n    )\n}\n\n```\n\n### Шаг 3: Импорт данных\n\nДанные, предоставленные Мировым центром данных (МЦД) и rp5 имеют различный формат, поэтому загрузим их отдельно друг от друга. Из МЦД было получено 2 файла: с данными о температуре и осадках и, второй, с данными о снежном покрове. Загрузим их, отберем необходимые столбцы и объединим в один датафрейм:\n\n```{r}\n#| label: Загрузка данных из Мирового центра данных\n#| warning: false\n\nobninsk_temperature <- read_excel(\"../initial_data/climate/1961_2005/23776_TTTR.xlsx\") |>\n  select(\n    Year = год,\n    Month = месяц,\n    Day = день,\n    Tavg = Тср,\n    Pr = осадки\n  )\n\nobninsk_snow <- read.csv2(\"../initial_data/climate/1961_2005/23776_snow.csv\", fileEncoding = \"windows-1251\") |>\n  select(\n    Station = Станция,\n    Year = Год,\n    Month = Месяц,\n    Day = День,\n    Sn = Высота_снежного_покрова,\n    Sn_description = Снежный_покров_.степень_покрытия\n  )\nobninsk <- obninsk_temperature |>\n  left_join(obninsk_snow, by = c(\"Year\", \"Month\", \"Day\")) |>\n  select(-Station) |> \n  filter(Year<2005 | (Year==2005 & Month == 1))\n```\n\nНа всякий случай проверим, нет ли избыточных строк в какой-либо год?\n\n```{r}\n#| label: Проверка на избыточные строки\n#| warning: false\n\nnrow(obninsk |> \n  group_by(Year) |> \n  summarise(N = n()) |> \n  filter(N>366)) == 0 #Все годы нормальной продолжительности\n\nrm(obninsk_snow, obninsk_temperature) # удалим промежуточные переменные\n\n\n```\n\nТеперь загрузим данные, полученные с rp5.ru, и объединим их с данными из МЦД и снова проверим, нет ли лишних строк? (то есть все годы должны быть \"нормальной\" продолжительности)\n\n```{r}\n#| label: Загрузка данных из rp5 и объединение с МЦД\n#| warning: false\n# Данные rp5.ru -----------------------------------------------------------\npaths <- list.files(\"../initial_data/climate/2005_2023\", pattern = \"[.]xls$\", full.names = TRUE) # Просканировали все файлы в директории\n\nrp5 <- paths |> \n  map_df(read_files) # объединили в 1 датафрейм все загруженные файлы\n\nrm(paths)\n\n# Объединенные данные -----------------------------------------------------\nclimate <- rbind(obninsk, rp5)\nnrow(climate |> \n  group_by(Year) |> \n  summarise(N = n()) |> \n  filter(N>366))==0 #Все годы нормальной продолжительности\n\nrm(obninsk, rp5)\n\n```\n\n### Шаг 4: Очистка данных суточного разрешения.\n\nПроверим данные на наличие пропусков\n\n```{r}\n#| label: Проверка на пропуски\n#| warning: false\nsummary(climate) # 271 пропуск средней температуры, 3423 пропуса снега, 1458 пропуск осадков\n```\n\nУдобно визуализировать пропуски с помощью пакета VIM\n\n```{r}\n#| label: Визуализация пропусков\n#| warning: false\naggr(climate, prop = F, numbers = T) # Визуализация пропусков из пакета VIM\n```\n\nРаботаем с пропусками следующим образом:\n\nЕсли Sn=9999.0, его надо заменить на NA\\\nСнега в летние месяцы быть не может\\\nЕсли осадки NA, а снег и температура не пропущены, то, скорее всего, осадков не было (=0)\\\nОставшиеся пропуски удалим методом линейной интерполяции (замена с помощью уравнения линейной регрессии y = kx+b) (na_interpolation из пакета imputeTS)\n\n```{r}\n#| label: Очистка пропусков\n#| warning: false\n\nclimate <- climate |> \n  mutate(Sn = case_when(\n    Sn == 9999 ~ NA,\n    Sn == \"NaN\" ~ NA,\n    .default = Sn\n  )) |> \n  mutate(Sn = case_when(\n    Month %in% c(6:8) & is.na(Sn) ~ 0,\n    .default = Sn\n  )) |> \n  mutate(Pr = case_when(\n    is.na(Pr) & is.na(Tavg) == F & is.na(Sn) == F ~ 0,\n    .default = Pr\n  )) |> \n  mutate(across(Tavg:Sn, na_interpolation))\n```\n\nПроверим, что получилось\n\n```{r}\n#| label: Проверка\n#| warning: false\nsummary(climate)\naggr(climate, prop = F, numbers = T)\n```\n\nОтлично, пропуски очищены.\n\n### Шаг 5: Проверка на выбросы\n\nДля средних температур есть проблемы с летними месяцами с 1966 по 1976 годы\n\n```{r}\n#| label: Проверка данных о температуре на выбросы\n\nclimate <- climate |>\n  mutate(Date = make_date(Year, Month, Day)) # датафрейм с датами в формате дат,чтобы plot_ly смог построить интерактивный график\n\ninteractive_graph(climate, parametr = 'Tavg', \"Temperature\") \n```\n\nПроверка данных об осадках на выбросы: выбросы есть\n\n```{r}\n#| label: Проверка данных об осадках на выбросы\ninteractive_graph(climate, parametr = 'Pr', \"Precipitations\") # Есть выбросы\n```\n\nСовсем нереальные пики заменил значениями, похожими на соседние\n\n```{r}\n#| label: Проверка данных об осадках на выбросы после очистки\nclimate <- climate |> \n  mutate(Pr = case_when(\n    Pr %in% c(204.3, 202) ~ 3,\n    Pr == 813 ~ 2,\n    .default = Pr\n  ))\ninteractive_graph(climate, parametr = 'Pr', \"Precipitations\") # стало лучше\n```\n\nСо снегом более-менее нормально.\\\nСлучайные пропуски не появились.\\\nСохраняем предобработанный файл с информацией суточного разрешения\n\n```{r}\n#| label: Проверка данных о глубине снежного покрова на выбросы\ninteractive_graph(climate, parametr= 'Sn', \"Snow depth\")\n\naggr(climate, prop = F, numbers = T) # Пропусков больше нет\n\n#write_csv2(climate, \"../initial_data/climate/cleaned/Bakhta_daily_problem_with_summer_1966-1976.csv\")\n```\n\n### Шаг 6. Расчет среднемесячных температур для метеостанции п. Бахта\n\nВидим, что есть проблемы с летними месяцами\n\n```{r}\n#| label: Среднемесячные температуры в Бахте\n#| warning: false\n\nBakhta_monthly <- climate |>\n  group_by(Year, Month) |>\n  summarise(across(c(Tavg, Sn), mean),\n            Pr = sum(Pr)) |> # Накопленное количество осадков\n  mutate(across(is.character, as.numeric)) |> \n  arrange(Year, Month) |> \n  mutate(Date = make_date(Year, Month))\n\ninteractive_graph(Bakhta_monthly, \"Tavg\", \"Temperature\")\n```\n\nЗагрузим данные о среднемесячных температурах с метеостанций п. Бор и Верхнеимбатск. Это ближайшие к Бахте метеостанции.\\\nПостроим график и сохраним данные месячного разрешения в отдельный файл для последующего анализа.\n\n```{r}\n#| label:  Бор и Верхнеимбатск месячные данные\nBor_monthly <- read_delim(\"../initial_data/climate/monthly/Bor_monthly.txt\",\n  delim = \";\", col_types = \"n\",\n  col_names = c(\"Station\", \"Year\", 1:12)) |> \n  select(-Station) |> \n  mutate_all(as.numeric) |> \n  pivot_longer(cols = -c(Year), names_to = \"Month\", values_to = \"Tavg\") |> \n  mutate(Date = make_date(Year, Month))\n\ninteractive_graph(Bor_monthly, parametr = 'Tavg', \"Temperature in Bor\")\n\nVerkhneimbatsk_monthly <- read_delim(\"../initial_data/climate/monthly/Verkhneimbatsk_monthly.txt\",\n  delim = \";\", col_types = \"n\",\n  col_names = c(\"Station\", \"Year\", 1:12)) |> \n  select(-Station) |> \n  mutate_all(as.numeric) |> \n  pivot_longer(cols = -c(Year), names_to = \"Month\", values_to = \"Tavg\") |> \n  mutate(Date = make_date(Year, Month))\n\ninteractive_graph(Verkhneimbatsk_monthly, parametr = 'Tavg', \"Temperature in Verkhneimbatsk\")\n\n```\n\nС ними более-менее все в порядке.\\\nПоэтому заменим данные за июнь-сентябрь 1966-1976 гг. в Бахте на осредненные по Бору и Верхнеимбатску, сохраним данные в отдельный файл для дальнейшего анализа.\n\n```{r}\n#| label: 1966-1976 Бахта замена на оср Бор - Верхнеимбатск \n#| warning: false\n\nBor_Verkhn <- Bor_monthly |>\n  left_join(Verkhneimbatsk_monthly, by = c(\"Year\", \"Month\")) |>\n  select(Year, Month, Bor_tavg = Tavg.x, Verkhn_tavg = Tavg.y) |>\n  filter(Year %in% c(1966:1976), Month %in% c(6:9)) |>\n  mutate(across(c(Year, Month), as.integer)) |> \n  group_by(Year, Month) |>\n  summarise(Tavg = mean(Bor_tavg, Verkhn_tavg))\n\nBakhta_monthly_new <- Bakhta_monthly |>\n  ungroup() |> \n  mutate(across(c(Year, Month), as.integer)) |> \n  left_join(Bor_Verkhn, by = c(\"Year\", \"Month\")) |>\n  mutate(Tavg = ifelse(is.na(Tavg.y) == F, Tavg.y, Tavg.x)) |>\n  select(Year, Month, Tavg, Sn, Pr, Date)\n\n\n# График среднемесячных температур в Бахте (1966-1976гг 6-8 мес заменены на оср Бор-Верхнеимбатск)\ninteractive_graph(Bakhta_monthly_new, \"Tavg\", \"Temperature in Bakhta\")\n\nrm(Bor_monthly, Bor_Verkhn, Verkhneimbatsk_monthly, climate)\n\n#write_csv2(Bakhta_monthly_new, \"../initial_data/climate/cleaned/Bakhta_monthly_1966-1976_replaced_by_average_Bor_Verkhn.csv\")\n\n\n\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"1_import_and_cleaning.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","editor":"visual","theme":"cosmo","title":"Импорт и очистка данных метеостанции п. Бахта. Расчет среднесуточных и среднемесячных значений","author":"Vasily Yakishov"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}