{
    "type": [
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        2,
        3,
        3,
        2,
        3,
        3,
        2,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        3,
        3,
        2,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        3,
        3,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        2,
        3,
        3,
        0,
        1,
        2,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2
    ],
    "data": [
        "+ ",
        "  }",
        "+ ",
        "  if (n_models==1){",
        "+ ",
        "    a <- summary(model_type)",
        "+ ",
        "    avg_result <- a$coefficients |> ",
        "+ ",
        "      as_tibble(rownames = \"features\") |> ",
        "+ ",
        "      cbind(confint(model_type)) |> ",
        "+ ",
        "      mutate(Spec = spec_name) |> ",
        "+ ",
        "      rename(P_val = `Pr(>|z|)`) |> ",
        "+ ",
        "      select(-`z value`) |> ",
        "+ ",
        "      mutate(N_models = n_models)",
        "+ ",
        "  }",
        "+ ",
        "  return(avg_result)",
        "+ ",
        "}",
        "> ",
        "# Когда численность в июне<августа для доминантов -------------------------",
        "> ",
        "with_neg_surv_for_common_spec <- common_spec_with_neg_survival |> ",
        "+ ",
        "  mutate(Spec = \"common\") |> ",
        "+ ",
        "  log_reg_for_each_spec(\"common\") |> ",
        "+ ",
        "  select(N_models, features, Estimate, `Std. Error`, P_val, `2.5 %`, `97.5 %`) |> ",
        "+ ",
        "  mutate(across(where(is.numeric), round, 4)) |> ",
        "+ ",
        "  filter(P_val <0.05)",
        "Fixed term is \"(Intercept)\"\n",
        "Warning message:\n",
        "\u001B[38;5;239mThere was 1 warning in `mutate()`.\u001B[39m\n\u001B[38;5;239m\u001B[36mℹ\u001B[38;5;239m In argument: `across(where(is.numeric), round, 4)`.\u001B[39m\nCaused by warning:\n\u001B[38;5;239m\u001B[33m!\u001B[38;5;239m The `...` argument of `across()` is deprecated as of dplyr 1.1.0.\nSupply arguments directly to `.fns` through an anonymous function instead.\n\n  # Previously\n  across(a:b, mean, na.rm = TRUE)\n\n  # Now\n  across(a:b, \\(x) mean(x, na.rm = TRUE))\n\u001B[90mThis warning is displayed once every 8 hours.\u001B[38;5;239m\n\u001B[90mCall `lifecycle::last_lifecycle_warnings()` to see where this warning was generated.\u001B[38;5;239m\u001B[39m \n",
        "> ",
        "with_neg_surv_for_uncommon_spec <- uncommon_spec_with_neg_survival |> ",
        "+ ",
        "  mutate(Spec = \"uncommon\") |> ",
        "+ ",
        "  log_reg_for_each_spec(\"uncommon\") |> ",
        "+ ",
        "  select(N_models, features, Estimate, `Std. Error`, P_val, `2.5 %`, `97.5 %`) |> ",
        "+ ",
        "  mutate(across(where(is.numeric), round, 4)) |> ",
        "+ ",
        "  filter(P_val <0.05)",
        "Fixed term is \"(Intercept)\"\n",
        "There were 50 or more warnings (use warnings() to see the first 50)",
        "\n",
        "> ",
        "View(with_neg_surv_for_common_spec)",
        "> ",
        "View(with_neg_surv_for_uncommon_spec)",
        "> ",
        "write_csv2(with_neg_surv_for_common_spec, \"initial_data/numbers+climate/log_reg/type_of_dynamic_with_negative_survival/significant_common_spec_with_neg_surv.csv\")",
        "\r\u001B[1mwrote\u001B[0m \u001B[32m2.15GB\u001B[0m in \u001B[36m 0s\u001B[0m, \u001B[32m2.15GB/s\u001B[0m\r                                                                                                    \r\nRestarting R session...\n\n",
        "> ",
        "source(\"A:/disser_calculation_new/scripts/climate+numbers/1_data_preparing.R\")",
        "── \u001B[1mAttaching core tidyverse packages\u001B[22m ────────────────────────────────────────────── tidyverse 2.0.0 ──\n\u001B[32m✔\u001B[39m \u001B[34mdplyr    \u001B[39m 1.1.4     \u001B[32m✔\u001B[39m \u001B[34mreadr    \u001B[39m 2.1.5\n\u001B[32m✔\u001B[39m \u001B[34mforcats  \u001B[39m 1.0.0     \u001B[32m✔\u001B[39m \u001B[34mstringr  \u001B[39m 1.5.1\n\u001B[32m✔\u001B[39m \u001B[34mggplot2  \u001B[39m 3.5.0     \u001B[32m✔\u001B[39m \u001B[34mtibble   \u001B[39m 3.2.1\n\u001B[32m✔\u001B[39m \u001B[34mlubridate\u001B[39m 1.9.3     \u001B[32m✔\u001B[39m \u001B[34mtidyr    \u001B[39m 1.3.1\n\u001B[32m✔\u001B[39m \u001B[34mpurrr    \u001B[39m 1.0.2     \n",
        "── \u001B[1mConflicts\u001B[22m ──────────────────────────────────────────────────────────────── tidyverse_conflicts() ──\n\u001B[31m✖\u001B[39m \u001B[34mdplyr\u001B[39m::\u001B[32mfilter()\u001B[39m masks \u001B[34mstats\u001B[39m::filter()\n\u001B[31m✖\u001B[39m \u001B[34mdplyr\u001B[39m::\u001B[32mlag()\u001B[39m    masks \u001B[34mstats\u001B[39m::lag()\n\u001B[36mℹ\u001B[39m Use the \u001B]8;;http://conflicted.r-lib.org/\u0007conflicted package\u001B]8;;\u0007 to force all conflicts to become errors\n",
        "\u001B[36mℹ\u001B[39m Using \u001B[34m\u001B[34m\"','\"\u001B[34m\u001B[39m as decimal and \u001B[34m\u001B[34m\"'.'\"\u001B[34m\u001B[39m as grouping mark. Use `read_delim()` for more control.\n\r\u001B[1mindexing\u001B[0m \u001B[34mwinter_survival.csv\u001B[0m [==================================================] \u001B[32m106.10MB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r                                                                                                                                         \r\u001B[1mRows: \u001B[22m\u001B[34m185\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m6\u001B[39m\n\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m──────────────────────────────────────────────────────────────────────────────\u001B[39m\n\u001B[1mDelimiter:\u001B[22m \";\"\n\u001B[31mchr\u001B[39m (2): Spec, dominant\n\u001B[32mdbl\u001B[39m (4): Year, Type, survival_rate, survival\n",
        "\n\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001B[36mℹ\u001B[39m Using \u001B[34m\u001B[34m\"','\"\u001B[34m\u001B[39m as decimal and \u001B[34m\u001B[34m\"'.'\"\u001B[34m\u001B[39m as grouping mark. Use `read_delim()` for more control.\n\r\u001B[1mindexing\u001B[0m \u001B[34mtype_of_dynamic.csv\u001B[0m [==================================================] \u001B[32m533.68MB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r                                                                                                                                         ",
        "\r\u001B[1mRows: \u001B[22m\u001B[34m350\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m4\u001B[39m\n\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m──────────────────────────────────────────────────────────────────────────────\u001B[39m\n\u001B[1mDelimiter:\u001B[22m \";\"\n\u001B[31mchr\u001B[39m (1): Spec\n\u001B[32mdbl\u001B[39m (3): Year, Numbers, Type\n\n\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n",
        "\u001B[36mℹ\u001B[39m Using \u001B[34m\u001B[34m\"','\"\u001B[34m\u001B[39m as decimal and \u001B[34m\u001B[34m\"'.'\"\u001B[34m\u001B[39m as grouping mark. Use `read_delim()` for more control.\n\r\u001B[1mindexing\u001B[0m \u001B[34mall_station_bad_snow.csv\u001B[0m [=============================================] \u001B[32m320.62MB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r                                                                                                                                         \r\u001B[1mRows: \u001B[22m\u001B[34m153\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m5\u001B[39m\n\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m──────────────────────────────────────────────────────────────────────────────\u001B[39m\n\u001B[1mDelimiter:\u001B[22m \";\"\n\u001B[31mchr\u001B[39m (1): Station\n\u001B[32mdbl\u001B[39m (4): Year, First_half, Last_half, count\n",
        "\n\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001B[36mℹ\u001B[39m Using \u001B[34m\u001B[34m\"','\"\u001B[34m\u001B[39m as decimal and \u001B[34m\u001B[34m\"'.'\"\u001B[34m\u001B[39m as grouping mark. Use `read_delim()` for more control.\n\r\u001B[1mindexing\u001B[0m \u001B[34mmonthly_anomaly.csv\u001B[0m [====================================================] \u001B[32m2.15GB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r                                                                                                                                         ",
        "\r\u001B[1mRows: \u001B[22m\u001B[34m6000\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m36\u001B[39m\n\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m──────────────────────────────────────────────────────────────────────────────\u001B[39m\n\u001B[1mDelimiter:\u001B[22m \";\"\n\u001B[31mchr\u001B[39m  (1): Station\n\u001B[32mdbl\u001B[39m (35): Year, Month, Tavg, Pr, Sn, Tavg_base, Tavg_base_SE, Sn_base, Sn_base_SE, Pr_base, Pr_bas...\n",
        "\n\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001B[36mℹ\u001B[39m Using \u001B[34m\u001B[34m\"','\"\u001B[34m\u001B[39m as decimal and \u001B[34m\u001B[34m\"'.'\"\u001B[34m\u001B[39m as grouping mark. Use `read_delim()` for more control.\n\r\u001B[1mindexing\u001B[0m \u001B[34mmelt_freeze_all_winter.csv\u001B[0m [============================================] \u001B[32m37.16MB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r                                                                                                                                         ",
        "\r\u001B[1mRows: \u001B[22m\u001B[34m47\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m2\u001B[39m\n\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m──────────────────────────────────────────────────────────────────────────────\u001B[39m\n\u001B[1mDelimiter:\u001B[22m \";\"\n\u001B[32mdbl\u001B[39m (2): Year, Melt_freeze\n\n\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n",
        "\u001B[36mℹ\u001B[39m Using \u001B[34m\u001B[34m\"','\"\u001B[34m\u001B[39m as decimal and \u001B[34m\u001B[34m\"'.'\"\u001B[34m\u001B[39m as grouping mark. Use `read_delim()` for more control.\n\r\u001B[1mindexing\u001B[0m \u001B[34mseason_by_temperature.csv\u001B[0m [==============================================] \u001B[32m1.17GB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r                                                                                                                                         \r\u001B[1mRows: \u001B[22m\u001B[34m181\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m14\u001B[39m\n\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m──────────────────────────────────────────────────────────────────────────────\u001B[39m\n\u001B[1mDelimiter:\u001B[22m \";\"\n\u001B[31mchr\u001B[39m  (1): Season\n\u001B[32mdbl\u001B[39m (13): Year, Tavg, Tavg_SE, Pr_sum, Sn_avg, Sn_avg_SE, Duration, start, Tavg_roll_mean, Pr_sum_...\n",
        "\n\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\r\u001B[1mwrote\u001B[0m \u001B[32m2.65kB\u001B[0m in \u001B[36m 0s\u001B[0m, \u001B[32m88.18MB/s\u001B[0m\r                                                                                                    \r\u001B[1mwrote\u001B[0m \u001B[32m2.15GB\u001B[0m in \u001B[36m 0s\u001B[0m, \u001B[32m2.15GB/s\u001B[0m\r                                                                                                    ",
        "\r\nRestarting R session...\n\n",
        "> ",
        "source(\"A:/disser_calculation_new/scripts/climate+numbers/3_logistic regression.R\")",
        "── \u001B[1mAttaching core tidyverse packages\u001B[22m ────────────────────────────────────────────── tidyverse 2.0.0 ──\n\u001B[32m✔\u001B[39m \u001B[34mdplyr    \u001B[39m 1.1.4     \u001B[32m✔\u001B[39m \u001B[34mreadr    \u001B[39m 2.1.5\n\u001B[32m✔\u001B[39m \u001B[34mforcats  \u001B[39m 1.0.0     \u001B[32m✔\u001B[39m \u001B[34mstringr  \u001B[39m 1.5.1\n\u001B[32m✔\u001B[39m \u001B[34mggplot2  \u001B[39m 3.5.0     \u001B[32m✔\u001B[39m \u001B[34mtibble   \u001B[39m 3.2.1\n\u001B[32m✔\u001B[39m \u001B[34mlubridate\u001B[39m 1.9.3     \u001B[32m✔\u001B[39m \u001B[34mtidyr    \u001B[39m 1.3.1\n\u001B[32m✔\u001B[39m \u001B[34mpurrr    \u001B[39m 1.0.2     \n",
        "── \u001B[1mConflicts\u001B[22m ──────────────────────────────────────────────────────────────── tidyverse_conflicts() ──\n\u001B[31m✖\u001B[39m \u001B[34mdplyr\u001B[39m::\u001B[32mfilter()\u001B[39m masks \u001B[34mstats\u001B[39m::filter()\n\u001B[31m✖\u001B[39m \u001B[34mdplyr\u001B[39m::\u001B[32mlag()\u001B[39m    masks \u001B[34mstats\u001B[39m::lag()\n\u001B[36mℹ\u001B[39m Use the \u001B]8;;http://conflicted.r-lib.org/\u0007conflicted package\u001B]8;;\u0007 to force all conflicts to become errors\n",
        "\u001B[36mℹ\u001B[39m Using \u001B[34m\u001B[34m\"','\"\u001B[34m\u001B[39m as decimal and \u001B[34m\u001B[34m\"'.'\"\u001B[34m\u001B[39m as grouping mark. Use `read_delim()` for more control.\n\r\u001B[1mindexing\u001B[0m \u001B[34mtype_of_dynamic_with_climate.csv\u001B[0m [=======================================] \u001B[32m1.13GB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r                                                                                                                                         \r\u001B[1mRows: \u001B[22m\u001B[34m350\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m12\u001B[39m\n\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m──────────────────────────────────────────────────────────────────────────────\u001B[39m\n\u001B[1mDelimiter:\u001B[22m \";\"\n\u001B[31mchr\u001B[39m  (1): Spec\n\u001B[32mdbl\u001B[39m (11): Type, count, Tavg_4, Tavg_5, Tavg_10, Tavg_11, Sn_4, Sn_5, Sn_10, Sn_11, Melt_freeze\n",
        "\n\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001B[36mℹ\u001B[39m Using \u001B[34m\u001B[34m\"','\"\u001B[34m\u001B[39m as decimal and \u001B[34m\u001B[34m\"'.'\"\u001B[34m\u001B[39m as grouping mark. Use `read_delim()` for more control.\n\r\u001B[1mindexing\u001B[0m \u001B[34mcommon_spec_type_with_neg_survival.csv\u001B[0m [===============================] \u001B[32m697.93MB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r                                                                                                                                         ",
        "\r\u001B[1mRows: \u001B[22m\u001B[34m67\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m13\u001B[39m\n\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m──────────────────────────────────────────────────────────────────────────────\u001B[39m\n\u001B[1mDelimiter:\u001B[22m \";\"\n\u001B[32mdbl\u001B[39m (13): Type, count, Tavg_4, Tavg_5, Tavg_10, Tavg_11, Sn_4, Sn_5, Sn_10, Sn_11, Melt_freeze, Au...\n\n\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n",
        "\u001B[36mℹ\u001B[39m Using \u001B[34m\u001B[34m\"','\"\u001B[34m\u001B[39m as decimal and \u001B[34m\u001B[34m\"'.'\"\u001B[34m\u001B[39m as grouping mark. Use `read_delim()` for more control.\n\r\u001B[1mindexing\u001B[0m \u001B[34muncommon_spec_type_with_neg_survival.csv\u001B[0m [=============================] \u001B[32m251.02MB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r                                                                                                                                         \r\u001B[1mRows: \u001B[22m\u001B[34m25\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m13\u001B[39m\n\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m──────────────────────────────────────────────────────────────────────────────\u001B[39m\n\u001B[1mDelimiter:\u001B[22m \";\"\n\u001B[32mdbl\u001B[39m (13): Type, count, Tavg_4, Tavg_5, Tavg_10, Tavg_11, Sn_4, Sn_5, Sn_10, Sn_11, Melt_freeze, Au...\n",
        "\n\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n",
        "Fixed term is \"(Intercept)\"\n",
        "Fixed term is \"(Intercept)\"\n",
        "Fixed term is \"(Intercept)\"\n",
        "Fixed term is \"(Intercept)\"\n",
        "Fixed term is \"(Intercept)\"\n",
        "Fixed term is \"(Intercept)\"\n",
        "Fixed term is \"(Intercept)\"\n",
        "Fixed term is \"(Intercept)\"\n",
        "Fixed term is \"(Intercept)\"\n",
        "Fixed term is \"(Intercept)\"\n",
        "\r\u001B[1mwrote\u001B[0m \u001B[32m966.00B\u001B[0m in \u001B[36m 0s\u001B[0m, \u001B[32m40.52MB/s\u001B[0m\r                                                                                                    \r\u001B[1mwrote\u001B[0m \u001B[32m2.15GB\u001B[0m in \u001B[36m 0s\u001B[0m, \u001B[32m2.15GB/s\u001B[0m\r                                                                                                    \r\r\u001B[1mwrote\u001B[0m \u001B[32m2.15GB\u001B[0m in \u001B[36m 0s\u001B[0m, \u001B[32m2.15GB/s\u001B[0m\r                                                                                                    \r",
        "Fixed term is \"(Intercept)\"\n",
        "Fixed term is \"(Intercept)\"\n",
        "\r\u001B[1mwrote\u001B[0m \u001B[32m2.15GB\u001B[0m in \u001B[36m 0s\u001B[0m, \u001B[32m2.15GB/s\u001B[0m\r                                                                                                    \r",
        "There were 50 or more warnings (use warnings() to see the first 50)",
        "\n",
        "\nRestarting R session...\n\n",
        "> ",
        "library(tidyverse)",
        "── \u001B[1mAttaching core tidyverse packages\u001B[22m ────────────────────────────────────────────── tidyverse 2.0.0 ──\n\u001B[32m✔\u001B[39m \u001B[34mdplyr    \u001B[39m 1.1.4     \u001B[32m✔\u001B[39m \u001B[34mreadr    \u001B[39m 2.1.5\n\u001B[32m✔\u001B[39m \u001B[34mforcats  \u001B[39m 1.0.0     \u001B[32m✔\u001B[39m \u001B[34mstringr  \u001B[39m 1.5.1\n\u001B[32m✔\u001B[39m \u001B[34mggplot2  \u001B[39m 3.5.0     \u001B[32m✔\u001B[39m \u001B[34mtibble   \u001B[39m 3.2.1\n\u001B[32m✔\u001B[39m \u001B[34mlubridate\u001B[39m 1.9.3     \u001B[32m✔\u001B[39m \u001B[34mtidyr    \u001B[39m 1.3.1\n\u001B[32m✔\u001B[39m \u001B[34mpurrr    \u001B[39m 1.0.2     \n",
        "── \u001B[1mConflicts\u001B[22m ──────────────────────────────────────────────────────────────── tidyverse_conflicts() ──\n\u001B[31m✖\u001B[39m \u001B[34mdplyr\u001B[39m::\u001B[32mfilter()\u001B[39m masks \u001B[34mstats\u001B[39m::filter()\n\u001B[31m✖\u001B[39m \u001B[34mdplyr\u001B[39m::\u001B[32mlag()\u001B[39m    masks \u001B[34mstats\u001B[39m::lag()\n\u001B[36mℹ\u001B[39m Use the \u001B]8;;http://conflicted.r-lib.org/\u0007conflicted package\u001B]8;;\u0007 to force all conflicts to become errors\n",
        "> ",
        "library(patchwork)",
        "> ",
        "all_spec <- read_csv2(\"initial_data/numbers+climate/type_of_dynamic_with_climate.csv\")",
        "\u001B[36mℹ\u001B[39m Using \u001B[34m\u001B[34m\"','\"\u001B[34m\u001B[39m as decimal and \u001B[34m\u001B[34m\"'.'\"\u001B[34m\u001B[39m as grouping mark. Use `read_delim()` for more control.\n\r\u001B[1mindexing\u001B[0m \u001B[34mtype_of_dynamic_with_climate.csv\u001B[0m [=======================================] \u001B[32m1.03GB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r                                                                                                                                         \r\u001B[1mRows: \u001B[22m\u001B[34m350\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m12\u001B[39m\n\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m──────────────────────────────────────────────────────────────────────────────\u001B[39m\n\u001B[1mDelimiter:\u001B[22m \";\"\n\u001B[31mchr\u001B[39m  (1): Spec\n\u001B[32mdbl\u001B[39m (11): Type, count, Tavg_4, Tavg_5, Tavg_10, Tavg_11, Sn_4, Sn_5, Sn_10, Sn_11, Melt_freeze\n",
        "\n\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n",
        "> ",
        "View(all_spec)",
        "> ",
        "all_spec <- read_csv2(\"initial_data/numbers+climate/type_of_dynamic_with_climate.csv\") |> ",
        "+ ",
        "  select(-Spec)",
        "\u001B[36mℹ\u001B[39m Using \u001B[34m\u001B[34m\"','\"\u001B[34m\u001B[39m as decimal and \u001B[34m\u001B[34m\"'.'\"\u001B[34m\u001B[39m as grouping mark. Use `read_delim()` for more control.\n\r\u001B[1mindexing\u001B[0m \u001B[34mtype_of_dynamic_with_climate.csv\u001B[0m [=======================================] \u001B[32m2.15GB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r                                                                                                                                         \r\u001B[1mRows: \u001B[22m\u001B[34m350\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m12\u001B[39m\n\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m──────────────────────────────────────────────────────────────────────────────\u001B[39m\n\u001B[1mDelimiter:\u001B[22m \";\"\n\u001B[31mchr\u001B[39m  (1): Spec\n\u001B[32mdbl\u001B[39m (11): Type, count, Tavg_4, Tavg_5, Tavg_10, Tavg_11, Sn_4, Sn_5, Sn_10, Sn_11, Melt_freeze\n",
        "\n\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n",
        "> ",
        "View(all_spec)",
        "> ",
        "u_test <- function(df){",
        "+ ",
        "  df |> ",
        "+ ",
        "    pivot_longer(cols = -Type, names_to = \"Parametr\", values_to = \"values\") |> ",
        "+ ",
        "    mutate(across(c(Type, Parametr), \\(x) as.factor(x))) |> ",
        "+ ",
        "    mutate(Type = case_when(Type == 0 ~ \"non_cyclic\",",
        "+ ",
        "                            .default = \"cyclic\")) |> ",
        "+ ",
        "    group_by(Type, Parametr) |> ",
        "+ ",
        "    summarise(values = list(values)) |> ",
        "+ ",
        "    spread(Type, values) |>  ",
        "+ ",
        "    group_by(Parametr) |> ",
        "+ ",
        "    mutate(p_value = round(wilcox.test(unlist(cyclic), unlist(non_cyclic))$p.value, 3)) |> ",
        "+ ",
        "    mutate(Pval_adj = p.adjust(p_value, \"BY\")) |> ",
        "+ ",
        "    filter(Pval_adj<0.05)",
        "+ ",
        "}",
        "> ",
        "graph_template <- function(df, sign_parametr, title){",
        "+ ",
        "  df |> ",
        "+ ",
        "    pivot_longer(cols = -Type, names_to = \"Parametr\", values_to = \"values\") |> ",
        "+ ",
        "    mutate(across(c(Type, Parametr), \\(x) as.factor(x))) |> ",
        "+ ",
        "    filter(Parametr %in% sign_parametr) |>",
        "+ ",
        "  mutate(Type = case_when(",
        "+ ",
        "    Type == 1 ~ \"циклические\",",
        "+ ",
        "    .default = \"флуктуации\"",
        "+ ",
        "  )) |> ",
        "+ ",
        "  ggplot(aes(y=values, col = Type))+",
        "+ ",
        "  geom_boxplot()+",
        "+ ",
        "  labs(x = NULL,",
        "+ ",
        "       y = NULL,",
        "+ ",
        "       col = \"Тип динамики\",",
        "+ ",
        "       title = title)+",
        "+ ",
        "  theme_minimal()+",
        "+ ",
        "  theme(legend.position = \"bottom\",",
        "+ ",
        "        legend.position.inside = (c(0.75,0.25)),",
        "+ ",
        "        axis.text.x = element_blank(),",
        "+ ",
        "        strip.placement = \"outside\")",
        "+ ",
        "}",
        "> ",
        "all_spec_wilcox <- u_test(all_spec)",
        "\u001B[38;5;239m`summarise()` has grouped output by 'Type'. You can override using the `.groups` argument.\u001B[39m\n",
        "> ",
        "View(all_spec_wilcox)",
        "> ",
        "graph_template(all_spec,",
        "+ ",
        "                                   sign_parametr = c(as.character(all_spec_wilcox$Parametr)),",
        "+ ",
        "                                   title = \"\")+",
        "+ ",
        "  facet_wrap(.~Parametr, scales = \"free_y\", ncol=2, strip.position = \"left\")",
        "> ",
        "library(tidyverse)",
        "> ",
        "# Import ------------------------------------------------------------------",
        "> ",
        "winter_survival <- read_csv2(\"initial_data/numbers/winter_survival.csv\")",
        "\u001B[36mℹ\u001B[39m Using \u001B[34m\u001B[34m\"','\"\u001B[34m\u001B[39m as decimal and \u001B[34m\u001B[34m\"'.'\"\u001B[34m\u001B[39m as grouping mark. Use `read_delim()` for more control.\n\r\u001B[1mindexing\u001B[0m \u001B[34mwinter_survival.csv\u001B[0m [==================================================] \u001B[32m270.81MB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r                                                                                                                                         \r\u001B[1mRows: \u001B[22m\u001B[34m185\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m6\u001B[39m\n\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m──────────────────────────────────────────────────────────────────────────────\u001B[39m\n\u001B[1mDelimiter:\u001B[22m \";\"\n\u001B[31mchr\u001B[39m (2): Spec, dominant\n\u001B[32mdbl\u001B[39m (4): Year, Type, survival_rate, survival\n",
        "\n\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n",
        "> ",
        "type_of_dynamic <- read_csv2(\"initial_data/numbers/type_of_dynamic.csv\") |> ",
        "+ ",
        "  select(-Numbers)",
        "\u001B[36mℹ\u001B[39m Using \u001B[34m\u001B[34m\"','\"\u001B[34m\u001B[39m as decimal and \u001B[34m\u001B[34m\"'.'\"\u001B[34m\u001B[39m as grouping mark. Use `read_delim()` for more control.\n\r\u001B[1mindexing\u001B[0m \u001B[34mtype_of_dynamic.csv\u001B[0m [==================================================] \u001B[32m388.66MB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r                                                                                                                                         \r\u001B[1mRows: \u001B[22m\u001B[34m350\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m4\u001B[39m\n\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m──────────────────────────────────────────────────────────────────────────────\u001B[39m\n\u001B[1mDelimiter:\u001B[22m \";\"\n\u001B[31mchr\u001B[39m (1): Spec\n\u001B[32mdbl\u001B[39m (3): Year, Numbers, Type\n",
        "\n\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n",
        "> ",
        "# Import climatic variables --------------------------------------------------",
        "> ",
        "bad_snow <- read_csv2(\"initial_data/climate/cleaned/all_station_bad_snow.csv\") |> ",
        "+ ",
        "  filter(Station == \"Бахта\") |> ",
        "+ ",
        "  select(Year, count)",
        "\u001B[36mℹ\u001B[39m Using \u001B[34m\u001B[34m\"','\"\u001B[34m\u001B[39m as decimal and \u001B[34m\u001B[34m\"'.'\"\u001B[34m\u001B[39m as grouping mark. Use `read_delim()` for more control.\n\r\u001B[1mindexing\u001B[0m \u001B[34mall_station_bad_snow.csv\u001B[0m [=============================================] \u001B[32m236.45MB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r                                                                                                                                         \r\u001B[1mRows: \u001B[22m\u001B[34m153\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m5\u001B[39m\n\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m──────────────────────────────────────────────────────────────────────────────\u001B[39m\n\u001B[1mDelimiter:\u001B[22m \";\"\n\u001B[31mchr\u001B[39m (1): Station\n\u001B[32mdbl\u001B[39m (4): Year, First_half, Last_half, count\n",
        "\n\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n",
        "> ",
        "average_parametr <- read_csv2(\"initial_data/climate/cleaned/monthly_anomaly.csv\") |> ",
        "+ ",
        "  filter(Station == \"bakhta\") |> ",
        "+ ",
        "  filter(Month %in% c(10,11,4,5)) |> ",
        "+ ",
        "  select(Year, Month, Tavg, Sn) |> ",
        "+ ",
        "  pivot_wider(id_cols = Year, values_from = c(Tavg, Sn), names_from = Month) |> ",
        "+ ",
        "  mutate(across(ends_with(c(\"10\", \"11\")), ~lag(.x))) #Месяцы 10,11 сместили на +1 (так как сопоставляем с данными по численности со следующим годом)",
        "\u001B[36mℹ\u001B[39m Using \u001B[34m\u001B[34m\"','\"\u001B[34m\u001B[39m as decimal and \u001B[34m\u001B[34m\"'.'\"\u001B[34m\u001B[39m as grouping mark. Use `read_delim()` for more control.\n\r\u001B[1mindexing\u001B[0m \u001B[34mmonthly_anomaly.csv\u001B[0m [====================================================] \u001B[32m2.15GB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r                                                                                                                                         \r\u001B[1mRows: \u001B[22m\u001B[34m6000\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m36\u001B[39m\n\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m──────────────────────────────────────────────────────────────────────────────\u001B[39m\n\u001B[1mDelimiter:\u001B[22m \";\"\n\u001B[31mchr\u001B[39m  (1): Station\n\u001B[32mdbl\u001B[39m (35): Year, Month, Tavg, Pr, Sn, Tavg_base, Tavg_base_SE, Sn_base, Sn_base_SE, Pr_base, Pr_bas...\n",
        "\n\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n",
        "> ",
        "melt_freeze <- read_csv2(\"initial_data/climate/cleaned/melt_freeze_all_winter.csv\")",
        "\u001B[36mℹ\u001B[39m Using \u001B[34m\u001B[34m\"','\"\u001B[34m\u001B[39m as decimal and \u001B[34m\u001B[34m\"'.'\"\u001B[34m\u001B[39m as grouping mark. Use `read_delim()` for more control.\n\r\u001B[1mindexing\u001B[0m \u001B[34mmelt_freeze_all_winter.csv\u001B[0m [============================================] \u001B[32m22.12MB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r                                                                                                                                         \r\u001B[1mRows: \u001B[22m\u001B[34m47\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m2\u001B[39m\n\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m──────────────────────────────────────────────────────────────────────────────\u001B[39m\n\u001B[1mDelimiter:\u001B[22m \";\"\n\u001B[32mdbl\u001B[39m (2): Year, Melt_freeze\n",
        "\n\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n",
        "> ",
        "season_by_temperature <- read_csv2(\"initial_data/climate/cleaned/season_by_temperature.csv\") |> ",
        "+ ",
        "  select(Year, Season, Dur_by_temp = Duration) |> ",
        "+ ",
        "  filter(Season %in% c(\"Spring\", \"Autumn\", \"Winter\")) |> ",
        "+ ",
        "  pivot_wider(id_cols = Year, names_from = Season, values_from = Dur_by_temp) |> ",
        "+ ",
        "  mutate(Autumn = lag(Autumn)) |> #Потому что осень влияет на данные след. года",
        "+ ",
        "  mutate(across(everything(), \\(x) case_when(is.na(x) ~ 0, .default = x))) |>  # NA означает 0 (значит переходы были резкими, а не размазанными)",
        "+ ",
        "  select(-Winter)",
        "\u001B[36mℹ\u001B[39m Using \u001B[34m\u001B[34m\"','\"\u001B[34m\u001B[39m as decimal and \u001B[34m\u001B[34m\"'.'\"\u001B[34m\u001B[39m as grouping mark. Use `read_delim()` for more control.\n\r\u001B[1mindexing\u001B[0m \u001B[34mseason_by_temperature.csv\u001B[0m [============================================] \u001B[32m847.94MB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r                                                                                                                                         \r\u001B[1mRows: \u001B[22m\u001B[34m181\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m14\u001B[39m\n\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m──────────────────────────────────────────────────────────────────────────────\u001B[39m\n\u001B[1mDelimiter:\u001B[22m \";\"\n\u001B[31mchr\u001B[39m  (1): Season\n\u001B[32mdbl\u001B[39m (13): Year, Tavg, Tavg_SE, Pr_sum, Sn_avg, Sn_avg_SE, Duration, start, Tavg_roll_mean, Pr_sum_...\n",
        "\n\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n",
        "> ",
        "climatic_parametr <- bad_snow |> ",
        "+ ",
        "  full_join(average_parametr, by = \"Year\") |> ",
        "+ ",
        "  full_join(melt_freeze, by = \"Year\") |> ",
        "+ ",
        "  full_join(season_by_temperature, by = \"Year\") |> ",
        "+ ",
        "  arrange(Year) |> ",
        "+ ",
        "  mutate(count = case_when(is.na(count)~0, .default = count))",
        "> ",
        "rm(bad_snow, average_parametr, melt_freeze, season_by_temperature)",
        "> ",
        "# Годы с отрицательной выживаемостью  -------------------------------------",
        "> ",
        "type_with_negative_survival_and_climate <- winter_survival |> ",
        "+ ",
        "  left_join(climatic_parametr, by=\"Year\") |>",
        "+ ",
        "  ungroup() |> ",
        "+ ",
        "  filter(survival_rate<median(survival_rate))|> ",
        "+ ",
        "  select(-c(Year, Spec, survival_rate, survival))",
        "> ",
        "common_spec_type_with_neg_survival <- type_with_negative_survival_and_climate |> ",
        "+ ",
        "  filter(dominant == \"common_spec\") |> ",
        "+ ",
        "  select(-dominant)",
        "> ",
        "uncommon_spec_type_with_neg_survival <- type_with_negative_survival_and_climate |> ",
        "+ ",
        "  filter(dominant == \"uncommon\") |> ",
        "+ ",
        "  select(-dominant)",
        "> ",
        "# Годы с отрицательной выживаемостью  -------------------------------------",
        "> ",
        "type_with_negative_survival_and_climate <- winter_survival |> ",
        "+ ",
        "  left_join(climatic_parametr, by=\"Year\") |>",
        "+ ",
        "  ungroup() |> ",
        "+ ",
        "  filter(survival_rate<median(survival_rate))|> ",
        "+ ",
        "  select(-c(Spec, survival_rate, survival))",
        "> ",
        "common_spec_type_with_neg_survival <- type_with_negative_survival_and_climate |> ",
        "+ ",
        "  filter(dominant == \"common_spec\") |> ",
        "+ ",
        "  select(-dominant)",
        "> ",
        "uncommon_spec_type_with_neg_survival <- type_with_negative_survival_and_climate |> ",
        "+ ",
        "  filter(dominant == \"uncommon\") |> ",
        "+ ",
        "  select(-dominant)",
        "> ",
        "levels(as.factor(common_spec_type_with_neg_survival$Year))",
        " [1] \"1980\" \"1981\" \"1983\" \"1984\" \"1985\" \"1986\" \"1988\" \"1989\" \"1990\" \"1991\" \"1992\" \"1993\" \"1994\" \"2009\"\n[15] \"2010\" \"2011\" \"2012\" \"2013\" \"2014\" \"2015\" \"2016\" \"2017\" \"2018\" \"2019\" \"2020\" \"2021\" \"2023\"\n",
        "> ",
        "View(common_spec_type_with_neg_survival)",
        "> ",
        "levels(as.factor(common_spec_type_with_neg_survival$Year[common_spec_type_with_neg_survival$Type == 1]))",
        " [1] \"1980\" \"1981\" \"1983\" \"1984\" \"1985\" \"1986\" \"1988\" \"1989\" \"1990\" \"1992\" \"1993\" \"1994\" \"2017\" \"2018\"\n[15] \"2019\" \"2020\" \"2021\" \"2023\"\n",
        "> ",
        "levels(as.factor(common_spec_type_with_neg_survival$Year[common_spec_type_with_neg_survival$Type == 0]))",
        " [1] \"1988\" \"1989\" \"1990\" \"1991\" \"1992\" \"1993\" \"1994\" \"2009\" \"2010\" \"2011\" \"2012\" \"2013\" \"2014\" \"2015\"\n[15] \"2016\" \"2017\" \"2018\" \"2019\" \"2020\" \"2021\"\n\nRestarting R session...\n\n",
        "> ",
        "library(tidyverse)",
        "── \u001B[1mAttaching core tidyverse packages\u001B[22m ────────────────────────────────────────────── tidyverse 2.0.0 ──\n\u001B[32m✔\u001B[39m \u001B[34mdplyr    \u001B[39m 1.1.4     \u001B[32m✔\u001B[39m \u001B[34mreadr    \u001B[39m 2.1.5\n\u001B[32m✔\u001B[39m \u001B[34mforcats  \u001B[39m 1.0.0     \u001B[32m✔\u001B[39m \u001B[34mstringr  \u001B[39m 1.5.1\n\u001B[32m✔\u001B[39m \u001B[34mggplot2  \u001B[39m 3.5.0     \u001B[32m✔\u001B[39m \u001B[34mtibble   \u001B[39m 3.2.1\n\u001B[32m✔\u001B[39m \u001B[34mlubridate\u001B[39m 1.9.3     \u001B[32m✔\u001B[39m \u001B[34mtidyr    \u001B[39m 1.3.1\n\u001B[32m✔\u001B[39m \u001B[34mpurrr    \u001B[39m 1.0.2     \n",
        "── \u001B[1mConflicts\u001B[22m ──────────────────────────────────────────────────────────────── tidyverse_conflicts() ──\n\u001B[31m✖\u001B[39m \u001B[34mdplyr\u001B[39m::\u001B[32mfilter()\u001B[39m masks \u001B[34mstats\u001B[39m::filter()\n\u001B[31m✖\u001B[39m \u001B[34mdplyr\u001B[39m::\u001B[32mlag()\u001B[39m    masks \u001B[34mstats\u001B[39m::lag()\n\u001B[36mℹ\u001B[39m Use the \u001B]8;;http://conflicted.r-lib.org/\u0007conflicted package\u001B]8;;\u0007 to force all conflicts to become errors\n",
        "> ",
        "# Import ------------------------------------------------------------------",
        "> ",
        "winter_survival <- read_csv2(\"initial_data/numbers/winter_survival.csv\")",
        "\u001B[36mℹ\u001B[39m Using \u001B[34m\u001B[34m\"','\"\u001B[34m\u001B[39m as decimal and \u001B[34m\u001B[34m\"'.'\"\u001B[34m\u001B[39m as grouping mark. Use `read_delim()` for more control.\n\r\u001B[1mindexing\u001B[0m \u001B[34mwinter_survival.csv\u001B[0m [==================================================] \u001B[32m151.27MB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r                                                                                                                                         \r\u001B[1mRows: \u001B[22m\u001B[34m185\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m6\u001B[39m\n\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m──────────────────────────────────────────────────────────────────────────────\u001B[39m\n\u001B[1mDelimiter:\u001B[22m \";\"\n\u001B[31mchr\u001B[39m (2): Spec, dominant\n\u001B[32mdbl\u001B[39m (4): Year, Type, survival_rate, survival\n",
        "\n\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n",
        "> ",
        "type_of_dynamic <- read_csv2(\"initial_data/numbers/type_of_dynamic.csv\") |> ",
        "+ ",
        "  select(-Numbers)",
        "\u001B[36mℹ\u001B[39m Using \u001B[34m\u001B[34m\"','\"\u001B[34m\u001B[39m as decimal and \u001B[34m\u001B[34m\"'.'\"\u001B[34m\u001B[39m as grouping mark. Use `read_delim()` for more control.\n\r\u001B[1mindexing\u001B[0m \u001B[34mtype_of_dynamic.csv\u001B[0m [==================================================] \u001B[32m354.02MB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r                                                                                                                                         \r\u001B[1mRows: \u001B[22m\u001B[34m350\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m4\u001B[39m\n\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m──────────────────────────────────────────────────────────────────────────────\u001B[39m\n\u001B[1mDelimiter:\u001B[22m \";\"\n\u001B[31mchr\u001B[39m (1): Spec\n\u001B[32mdbl\u001B[39m (3): Year, Numbers, Type\n",
        "\n\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n",
        "> ",
        "",
        "> ",
        "# Import climatic variables --------------------------------------------------",
        "> ",
        "bad_snow <- read_csv2(\"initial_data/climate/cleaned/all_station_bad_snow.csv\") |> ",
        "+ ",
        "  filter(Station == \"Бахта\") |> ",
        "+ ",
        "  select(Year, count)",
        "\u001B[36mℹ\u001B[39m Using \u001B[34m\u001B[34m\"','\"\u001B[34m\u001B[39m as decimal and \u001B[34m\u001B[34m\"'.'\"\u001B[34m\u001B[39m as grouping mark. Use `read_delim()` for more control.\n\r\u001B[1mindexing\u001B[0m \u001B[34mall_station_bad_snow.csv\u001B[0m [=============================================] \u001B[32m343.93MB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r                                                                                                                                         \r\u001B[1mRows: \u001B[22m\u001B[34m153\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m5\u001B[39m\n\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m──────────────────────────────────────────────────────────────────────────────\u001B[39m\n\u001B[1mDelimiter:\u001B[22m \";\"\n\u001B[31mchr\u001B[39m (1): Station\n\u001B[32mdbl\u001B[39m (4): Year, First_half, Last_half, count\n",
        "\n\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n",
        "> ",
        "average_parametr <- read_csv2(\"initial_data/climate/cleaned/monthly_anomaly.csv\") |> ",
        "+ ",
        "  filter(Station == \"bakhta\") |> ",
        "+ ",
        "  filter(Month %in% c(10,11,4,5)) |> ",
        "+ ",
        "  select(Year, Month, Tavg, Sn) |> ",
        "+ ",
        "  pivot_wider(id_cols = Year, values_from = c(Tavg, Sn), names_from = Month) |> ",
        "+ ",
        "  mutate(across(ends_with(c(\"10\", \"11\")), ~lag(.x))) #Месяцы 10,11 сместили на +1 (так как сопоставляем с данными по численности со следующим годом)",
        "\u001B[36mℹ\u001B[39m Using \u001B[34m\u001B[34m\"','\"\u001B[34m\u001B[39m as decimal and \u001B[34m\u001B[34m\"'.'\"\u001B[34m\u001B[39m as grouping mark. Use `read_delim()` for more control.\n\r\u001B[1mindexing\u001B[0m \u001B[34mmonthly_anomaly.csv\u001B[0m [====================================================] \u001B[32m2.15GB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r                                                                                                                                         \r\u001B[1mRows: \u001B[22m\u001B[34m6000\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m36\u001B[39m\n\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m──────────────────────────────────────────────────────────────────────────────\u001B[39m\n\u001B[1mDelimiter:\u001B[22m \";\"\n\u001B[31mchr\u001B[39m  (1): Station\n\u001B[32mdbl\u001B[39m (35): Year, Month, Tavg, Pr, Sn, Tavg_base, Tavg_base_SE, Sn_base, Sn_base_SE, Pr_base, Pr_bas...\n",
        "\n\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n",
        "> ",
        "melt_freeze <- read_csv2(\"initial_data/climate/cleaned/melt_freeze_all_winter.csv\")",
        "\u001B[36mℹ\u001B[39m Using \u001B[34m\u001B[34m\"','\"\u001B[34m\u001B[39m as decimal and \u001B[34m\u001B[34m\"'.'\"\u001B[34m\u001B[39m as grouping mark. Use `read_delim()` for more control.\n\r\u001B[1mindexing\u001B[0m \u001B[34mmelt_freeze_all_winter.csv\u001B[0m [============================================] \u001B[32m24.77MB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r                                                                                                                                         \r\u001B[1mRows: \u001B[22m\u001B[34m47\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m2\u001B[39m\n\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m──────────────────────────────────────────────────────────────────────────────\u001B[39m\n\u001B[1mDelimiter:\u001B[22m \";\"\n\u001B[32mdbl\u001B[39m (2): Year, Melt_freeze\n",
        "\n\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n",
        "> ",
        "",
        "> ",
        "season_by_temperature <- read_csv2(\"initial_data/climate/cleaned/season_by_temperature.csv\") |> ",
        "+ ",
        "  select(Year, Season, Dur_by_temp = Duration) |> ",
        "+ ",
        "  filter(Season %in% c(\"Spring\", \"Autumn\", \"Winter\")) |> ",
        "+ ",
        "  pivot_wider(id_cols = Year, names_from = Season, values_from = Dur_by_temp) |> ",
        "+ ",
        "  mutate(Autumn = lag(Autumn)) |> #Потому что осень влияет на данные след. года",
        "+ ",
        "  mutate(across(everything(), \\(x) case_when(is.na(x) ~ 0, .default = x))) |>  # NA означает 0 (значит переходы были резкими, а не размазанными)",
        "+ ",
        "  select(-Winter)",
        "\u001B[36mℹ\u001B[39m Using \u001B[34m\u001B[34m\"','\"\u001B[34m\u001B[39m as decimal and \u001B[34m\u001B[34m\"'.'\"\u001B[34m\u001B[39m as grouping mark. Use `read_delim()` for more control.\n\r\u001B[1mindexing\u001B[0m \u001B[34mseason_by_temperature.csv\u001B[0m [==============================================] \u001B[32m1.08GB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r                                                                                                                                         \r\u001B[1mRows: \u001B[22m\u001B[34m181\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m14\u001B[39m\n\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m──────────────────────────────────────────────────────────────────────────────\u001B[39m\n\u001B[1mDelimiter:\u001B[22m \";\"\n\u001B[31mchr\u001B[39m  (1): Season\n\u001B[32mdbl\u001B[39m (13): Year, Tavg, Tavg_SE, Pr_sum, Sn_avg, Sn_avg_SE, Duration, start, Tavg_roll_mean, Pr_sum_...\n",
        "\n\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n",
        "> ",
        "",
        "> ",
        "climatic_parametr <- bad_snow |> ",
        "+ ",
        "  full_join(average_parametr, by = \"Year\") |> ",
        "+ ",
        "  full_join(melt_freeze, by = \"Year\") |> ",
        "+ ",
        "  full_join(season_by_temperature, by = \"Year\") |> ",
        "+ ",
        "  arrange(Year) |> ",
        "+ ",
        "  mutate(count = case_when(is.na(count)~0, .default = count))",
        "> ",
        "",
        "> ",
        "rm(bad_snow, average_parametr, melt_freeze, season_by_temperature)",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "# Годы с отрицательной выживаемостью  -------------------------------------",
        "> ",
        "type_with_negative_survival_and_climate <- winter_survival |> ",
        "+ ",
        "  left_join(climatic_parametr, by=\"Year\") |>",
        "+ ",
        "  ungroup() |> ",
        "+ ",
        "  filter(survival_rate<median(survival_rate))|> ",
        "+ ",
        "  select(-c(Year, Spec, survival_rate, survival))",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "common_spec_type_with_neg_survival <- type_with_negative_survival_and_climate |> ",
        "+ ",
        "  filter(dominant == \"common_spec\") |> ",
        "+ ",
        "  select(-dominant)",
        "> ",
        "",
        "> ",
        "uncommon_spec_type_with_neg_survival <- type_with_negative_survival_and_climate |> ",
        "+ ",
        "  filter(dominant == \"uncommon\") |> ",
        "+ ",
        "  select(-dominant)",
        "> ",
        "type_with_negative_survival_and_climate <- winter_survival |> ",
        "+ ",
        "  left_join(climatic_parametr, by=\"Year\") |>",
        "+ ",
        "  ungroup() |> ",
        "+ ",
        "  filter(survival_rate<median(survival_rate))|> ",
        "+ ",
        "  select(-c(Spec, survival_rate, survival))",
        "> ",
        "levels(as.factor(type_with_negative_survival_and_climate$Year))",
        " [1] \"1980\" \"1981\" \"1983\" \"1984\" \"1985\" \"1986\" \"1988\" \"1989\" \"1990\" \"1991\" \"1992\" \"1993\" \"1994\" \"2009\"\n[15] \"2010\" \"2011\" \"2012\" \"2013\" \"2014\" \"2015\" \"2016\" \"2017\" \"2018\" \"2019\" \"2020\" \"2021\" \"2023\"\n",
        "> ",
        "common_spec_type_with_neg_survival <- type_with_negative_survival_and_climate |> ",
        "+ ",
        "  filter(dominant == \"common_spec\") |> ",
        "+ ",
        "  select(-с(dominant, Year))",
        "\u001B[1m\u001B[33mError\u001B[39m in `select()`:\u001B[22m\n\u001B[38;5;239m\u001B[36mℹ\u001B[38;5;239m In argument: `с(dominant, Year)`.\u001B[39m\n\u001B[1mCaused by error in `с()`:\u001B[22m\n\u001B[33m!\u001B[39m could not find function \"с\"\n\u001B[90mRun `\u001B]8;;rstudio:run:rlang::last_trace()\u0007rlang::last_trace()\u001B]8;;\u0007` to see where the error occurred.\u001B[39m\n",
        "> ",
        "common_spec_type_with_neg_survival <- type_with_negative_survival_and_climate |> ",
        "+ ",
        "  filter(dominant == \"common_spec\") |> ",
        "+ ",
        "  select(-c(dominant, Year))",
        "> ",
        "uncommon_spec_type_with_neg_survival <- type_with_negative_survival_and_climate |> ",
        "+ ",
        "  filter(dominant == \"uncommon\") |> ",
        "+ ",
        "  select(-c(dominant, Year))",
        "> ",
        "View(uncommon_spec_type_with_neg_survival)",
        "> ",
        "View(common_spec_type_with_neg_survival)",
        "> ",
        "#В какие годы наблюдалась максимальная зимняя смертность?",
        "> ",
        "year_with_max_mortality <- levels(as.factor(type_with_negative_survival_and_climate$Year))",
        "> ",
        "View(climatic_parametr)",
        "> ",
        "# отбор климатических параметров в годы с максимальной зимней смертностью",
        "> ",
        "climatic_parametr |> ",
        "+ ",
        "  filter(Year %in% year_with_max_mortality)",
        "\u001B[38;5;246m# A tibble: 27 × 13\u001B[39m\n    Year count Tavg_4 Tavg_5 Tavg_10 Tavg_11  Sn_4   Sn_5  Sn_10 Sn_11 Melt_freeze Autumn Spring\n   \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m  \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m  \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m   \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m   \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m  \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m  \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m       \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m  \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m  \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m\n",
        "\u001B[38;5;250m 1\u001B[39m  \u001B[4m1\u001B[24m980     5  -\u001B[31m5\u001B[39m\u001B[31m.\u001B[39m\u001B[31m67\u001B[39m   1.29  -\u001B[31m3\u001B[39m\u001B[31m.\u001B[39m\u001B[31m91\u001B[39m   -\u001B[31m15\u001B[39m\u001B[31m.\u001B[39m\u001B[31m2\u001B[39m   66.0 13.6    9     30.2           20     66     46\n\u001B[38;5;250m 2\u001B[39m  \u001B[4m1\u001B[24m981     6  -\u001B[31m1\u001B[39m\u001B[31m.\u001B[39m\u001B[31m86\u001B[39m   2.87  -\u001B[31m1\u001B[39m\u001B[31m.\u001B[39m\u001B[31m70\u001B[39m   -\u001B[31m14\u001B[39m\u001B[31m.\u001B[39m\u001B[31m2\u001B[39m   17.3  0.129  2.87  17.6           24     25     46\n\u001B[38;5;250m 3\u001B[39m  \u001B[4m1\u001B[24m983     0  -\u001B[31m7\u001B[39m\u001B[31m.\u001B[39m\u001B[31m96\u001B[39m   1.00  -\u001B[31m8\u001B[39m\u001B[31m.\u001B[39m\u001B[31m64\u001B[39m   -\u001B[31m13\u001B[39m\u001B[31m.\u001B[39m\u001B[31m7\u001B[39m   90.9 41.9   15.2   41.2           18      0     82\n",
        "\u001B[38;5;250m 4\u001B[39m  \u001B[4m1\u001B[24m984    10 -\u001B[31m13\u001B[39m\u001B[31m.\u001B[39m\u001B[31m3\u001B[39m    4.37   0.106   -\u001B[31m8\u001B[39m\u001B[31m.\u001B[39m\u001B[31m61\u001B[39m  51.5  3.19   0.355  9.67          16     30     20\n\u001B[38;5;250m 5\u001B[39m  \u001B[4m1\u001B[24m985     1  -\u001B[31m3\u001B[39m\u001B[31m.\u001B[39m\u001B[31m28\u001B[39m   3.76  -\u001B[31m5\u001B[39m\u001B[31m.\u001B[39m\u001B[31m0\u001B[39m\u001B[31m2\u001B[39m   -\u001B[31m25\u001B[39m\u001B[31m.\u001B[39m\u001B[31m0\u001B[39m   38.7  1.03   8.13  16.1           16     26     39\n\u001B[38;5;250m 6\u001B[39m  \u001B[4m1\u001B[24m986     6  -\u001B[31m5\u001B[39m\u001B[31m.\u001B[39m\u001B[31m84\u001B[39m   3     -\u001B[31m0\u001B[39m\u001B[31m.\u001B[39m\u001B[31m371\u001B[39m  -\u001B[31m15\u001B[39m\u001B[31m.\u001B[39m\u001B[31m3\u001B[39m   52   18.4    2.97  21.4           16     17     39\n",
        "\u001B[38;5;250m 7\u001B[39m  \u001B[4m1\u001B[24m988     4  -\u001B[31m5\u001B[39m\u001B[31m.\u001B[39m\u001B[31m42\u001B[39m   3.59  -\u001B[31m3\u001B[39m\u001B[31m.\u001B[39m\u001B[31m78\u001B[39m   -\u001B[31m22\u001B[39m\u001B[31m.\u001B[39m\u001B[31m1\u001B[39m   70.4 18.3    4.90  34.1           14     14     36\n\u001B[38;5;250m 8\u001B[39m  \u001B[4m1\u001B[24m989     5  -\u001B[31m7\u001B[39m\u001B[31m.\u001B[39m\u001B[31m96\u001B[39m   5.36  -\u001B[31m1\u001B[39m\u001B[31m.\u001B[39m\u001B[31m34\u001B[39m    -\u001B[31m9\u001B[39m\u001B[31m.\u001B[39m\u001B[31m43\u001B[39m  56.6 12.1    3.65  30.5           16     28     39\n\u001B[38;5;250m 9\u001B[39m  \u001B[4m1\u001B[24m990     3  -\u001B[31m1\u001B[39m\u001B[31m.\u001B[39m\u001B[31m79\u001B[39m   5.36  -\u001B[31m2\u001B[39m\u001B[31m.\u001B[39m\u001B[31m39\u001B[39m   -\u001B[31m12\u001B[39m\u001B[31m.\u001B[39m\u001B[31m3\u001B[39m   36.1  1.97   3.65  35.4           20     26     46\n",
        "\u001B[38;5;250m10\u001B[39m  \u001B[4m1\u001B[24m991    15  -\u001B[31m2\u001B[39m\u001B[31m.\u001B[39m\u001B[31m63\u001B[39m   3.88  -\u001B[31m2\u001B[39m\u001B[31m.\u001B[39m\u001B[31m00\u001B[39m   -\u001B[31m16\u001B[39m\u001B[31m.\u001B[39m\u001B[31m1\u001B[39m   41.7  1.19   2.35  21.2           24     49     53\n\u001B[38;5;246m# ℹ 17 more rows\u001B[39m\n\u001B[38;5;246m# ℹ Use `print(n = ...)` to see more rows\u001B[39m\n",
        "> ",
        "# отбор климатических параметров в годы с максимальной зимней смертностью",
        "> ",
        "clim_parametr_with_max_mortality <- climatic_parametr |> ",
        "+ ",
        "  filter(Year %in% year_with_max_mortality)",
        "> ",
        "View(clim_parametr_with_max_mortality)",
        "> ",
        "View(type_of_dynamic)",
        "> ",
        "type_of_dynamic |> ",
        "+ ",
        "  filter(Spec == \"Community\")",
        "\u001B[38;5;246m# A tibble: 35 × 3\u001B[39m\n    Year Spec       Type\n   \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m     \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m\n\u001B[38;5;250m 1\u001B[39m  \u001B[4m1\u001B[24m976 Community     1\n\u001B[38;5;250m 2\u001B[39m  \u001B[4m1\u001B[24m977 Community     1\n\u001B[38;5;250m 3\u001B[39m  \u001B[4m1\u001B[24m978 Community     1\n\u001B[38;5;250m 4\u001B[39m  \u001B[4m1\u001B[24m979 Community     1\n\u001B[38;5;250m 5\u001B[39m  \u001B[4m1\u001B[24m980 Community     1\n\u001B[38;5;250m 6\u001B[39m  \u001B[4m1\u001B[24m981 Community     1\n\u001B[38;5;250m 7\u001B[39m  \u001B[4m1\u001B[24m982 Community     1\n\u001B[38;5;250m 8\u001B[39m  \u001B[4m1\u001B[24m983 Community     1\n",
        "\u001B[38;5;250m 9\u001B[39m  \u001B[4m1\u001B[24m984 Community     1\n\u001B[38;5;250m10\u001B[39m  \u001B[4m1\u001B[24m985 Community     1\n\u001B[38;5;246m# ℹ 25 more rows\u001B[39m\n\u001B[38;5;246m# ℹ Use `print(n = ...)` to see more rows\u001B[39m\n",
        "> ",
        "# отбор климатических параметров в годы с максимальной зимней смертностью",
        "> ",
        "clim_parametr_with_max_mortality <- climatic_parametr |> ",
        "+ ",
        "  filter(Year %in% year_with_max_mortality) |> ",
        "+ ",
        "  left_join(type_of_dynamic |> filter(Spec == \"Community\"), by=\"Year\")",
        "> ",
        "View(clim_parametr_with_max_mortality)",
        "> ",
        "# отбор климатических параметров в годы с максимальной зимней смертностью",
        "> ",
        "clim_parametr_with_max_mortality <- climatic_parametr |> ",
        "+ ",
        "  filter(Year %in% year_with_max_mortality) |> ",
        "+ ",
        "  left_join(type_of_dynamic |> filter(Spec == \"Community\"), by=\"Year\") |> ",
        "+ ",
        "  select(-c(Year, Spec))",
        "> ",
        "View(clim_parametr_with_max_mortality)",
        "> ",
        "write.csv2(clim_parametr_with_max_mortality, \"initial_data/numbers+climate/clim_parametr_with_max_mortality.csv\", row.names = F)",
        "\nRestarting R session...\n\n",
        "> ",
        "library(tidyverse)",
        "── \u001B[1mAttaching core tidyverse packages\u001B[22m ────────────────────────────────────────────── tidyverse 2.0.0 ──\n\u001B[32m✔\u001B[39m \u001B[34mdplyr    \u001B[39m 1.1.4     \u001B[32m✔\u001B[39m \u001B[34mreadr    \u001B[39m 2.1.5\n\u001B[32m✔\u001B[39m \u001B[34mforcats  \u001B[39m 1.0.0     \u001B[32m✔\u001B[39m \u001B[34mstringr  \u001B[39m 1.5.1\n\u001B[32m✔\u001B[39m \u001B[34mggplot2  \u001B[39m 3.5.0     \u001B[32m✔\u001B[39m \u001B[34mtibble   \u001B[39m 3.2.1\n\u001B[32m✔\u001B[39m \u001B[34mlubridate\u001B[39m 1.9.3     \u001B[32m✔\u001B[39m \u001B[34mtidyr    \u001B[39m 1.3.1\n\u001B[32m✔\u001B[39m \u001B[34mpurrr    \u001B[39m 1.0.2     \n",
        "── \u001B[1mConflicts\u001B[22m ──────────────────────────────────────────────────────────────── tidyverse_conflicts() ──\n\u001B[31m✖\u001B[39m \u001B[34mdplyr\u001B[39m::\u001B[32mfilter()\u001B[39m masks \u001B[34mstats\u001B[39m::filter()\n\u001B[31m✖\u001B[39m \u001B[34mdplyr\u001B[39m::\u001B[32mlag()\u001B[39m    masks \u001B[34mstats\u001B[39m::lag()\n\u001B[36mℹ\u001B[39m Use the \u001B]8;;http://conflicted.r-lib.org/\u0007conflicted package\u001B]8;;\u0007 to force all conflicts to become errors\n",
        "> ",
        "library(patchwork)",
        "> ",
        "clim_parametr_with_max_mortal <- read_csv2(\"initial_data/numbers+climate/clim_parametr_with_max_mortality.csv\")",
        "\u001B[36mℹ\u001B[39m Using \u001B[34m\u001B[34m\"','\"\u001B[34m\u001B[39m as decimal and \u001B[34m\u001B[34m\"'.'\"\u001B[34m\u001B[39m as grouping mark. Use `read_delim()` for more control.\n\r\u001B[1mindexing\u001B[0m \u001B[34mclim_parametr_with_max_mortality.csv\u001B[0m [==================================] \u001B[32m69.09MB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r                                                                                                                                         \r\u001B[1mRows: \u001B[22m\u001B[34m27\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m13\u001B[39m\n\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m──────────────────────────────────────────────────────────────────────────────\u001B[39m\n\u001B[1mDelimiter:\u001B[22m \";\"\n\u001B[32mdbl\u001B[39m (13): count, Tavg_4, Tavg_5, Tavg_10, Tavg_11, Sn_4, Sn_5, Sn_10, Sn_11, Melt_freeze, Autumn, ...\n",
        "\n\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n",
        "> ",
        "View(clim_parametr_with_max_mortal)",
        "> ",
        "u_test <- function(df){",
        "+ ",
        "  df |> ",
        "+ ",
        "    pivot_longer(cols = -Type, names_to = \"Parametr\", values_to = \"values\") |> ",
        "+ ",
        "    mutate(across(c(Type, Parametr), \\(x) as.factor(x))) |> ",
        "+ ",
        "    mutate(Type = case_when(Type == 0 ~ \"non_cyclic\",",
        "+ ",
        "                            .default = \"cyclic\")) |> ",
        "+ ",
        "    group_by(Type, Parametr) |> ",
        "+ ",
        "    summarise(values = list(values)) |> ",
        "+ ",
        "    spread(Type, values) |>  ",
        "+ ",
        "    group_by(Parametr) |> ",
        "+ ",
        "    mutate(p_value = round(wilcox.test(unlist(cyclic), unlist(non_cyclic))$p.value, 3)) |> ",
        "+ ",
        "    mutate(Pval_adj = p.adjust(p_value, \"BY\")) |> ",
        "+ ",
        "    filter(Pval_adj<0.05)",
        "+ ",
        "}",
        "> ",
        "graph_template <- function(df, sign_parametr, title){",
        "+ ",
        "  df |> ",
        "+ ",
        "    pivot_longer(cols = -Type, names_to = \"Parametr\", values_to = \"values\") |> ",
        "+ ",
        "    mutate(across(c(Type, Parametr), \\(x) as.factor(x))) |> ",
        "+ ",
        "    filter(Parametr %in% sign_parametr) |>",
        "+ ",
        "  mutate(Type = case_when(",
        "+ ",
        "    Type == 1 ~ \"циклические\",",
        "+ ",
        "    .default = \"флуктуации\"",
        "+ ",
        "  )) |> ",
        "+ ",
        "  ggplot(aes(y=values, col = Type))+",
        "+ ",
        "  geom_boxplot()+",
        "+ ",
        "  labs(x = NULL,",
        "+ ",
        "       y = NULL,",
        "+ ",
        "       col = \"Тип динамики\",",
        "+ ",
        "       title = title)+",
        "+ ",
        "  theme_minimal()+",
        "+ ",
        "  theme(legend.position = \"bottom\",",
        "+ ",
        "        legend.position.inside = (c(0.75,0.25)),",
        "+ ",
        "        axis.text.x = element_blank(),",
        "+ ",
        "        strip.placement = \"outside\")",
        "+ ",
        "}",
        "> ",
        "all <- u_test(clim_parametr_with_max_mortal)",
        "\u001B[38;5;239m`summarise()` has grouped output by 'Type'. You can override using the `.groups` argument.\u001B[39m\n",
        "Warning message:\n",
        "\u001B[38;5;239mThere were 6 warnings in `mutate()`.\nThe first warning was:\u001B[39m\n\u001B[38;5;239m\u001B[36mℹ\u001B[38;5;239m In argument: `p_value = round(...)`.\n\u001B[36mℹ\u001B[38;5;239m In group 1: `Parametr = Autumn`.\u001B[39m\nCaused by warning in `wilcox.test.default()`:\n\u001B[33m!\u001B[39m не могу подсчитать точное p-значение при наличии повторяющихся наблюдений\n\u001B[38;5;239m\u001B[36mℹ\u001B[38;5;239m Run \u001B]8;;ide:run:dplyr::last_dplyr_warnings()\u0007dplyr::last_dplyr_warnings()\u001B]8;;\u0007 to see the 5 remaining warnings.\u001B[39m \n",
        "\nRestarting R session...\n\n",
        "> ",
        "library(tidyverse)",
        "── \u001B[1mAttaching core tidyverse packages\u001B[22m ────────────────────────────────────────────── tidyverse 2.0.0 ──\n\u001B[32m✔\u001B[39m \u001B[34mdplyr    \u001B[39m 1.1.4     \u001B[32m✔\u001B[39m \u001B[34mreadr    \u001B[39m 2.1.5\n\u001B[32m✔\u001B[39m \u001B[34mforcats  \u001B[39m 1.0.0     \u001B[32m✔\u001B[39m \u001B[34mstringr  \u001B[39m 1.5.1\n\u001B[32m✔\u001B[39m \u001B[34mggplot2  \u001B[39m 3.5.0     \u001B[32m✔\u001B[39m \u001B[34mtibble   \u001B[39m 3.2.1\n\u001B[32m✔\u001B[39m \u001B[34mlubridate\u001B[39m 1.9.3     \u001B[32m✔\u001B[39m \u001B[34mtidyr    \u001B[39m 1.3.1\n\u001B[32m✔\u001B[39m \u001B[34mpurrr    \u001B[39m 1.0.2     \n",
        "── \u001B[1mConflicts\u001B[22m ──────────────────────────────────────────────────────────────── tidyverse_conflicts() ──\n\u001B[31m✖\u001B[39m \u001B[34mdplyr\u001B[39m::\u001B[32mfilter()\u001B[39m masks \u001B[34mstats\u001B[39m::filter()\n\u001B[31m✖\u001B[39m \u001B[34mdplyr\u001B[39m::\u001B[32mlag()\u001B[39m    masks \u001B[34mstats\u001B[39m::lag()\n\u001B[36mℹ\u001B[39m Use the \u001B]8;;http://conflicted.r-lib.org/\u0007conflicted package\u001B]8;;\u0007 to force all conflicts to become errors\n",
        "> ",
        "# Import ------------------------------------------------------------------",
        "> ",
        "winter_survival <- read_csv2(\"initial_data/numbers/winter_survival.csv\")",
        "\u001B[36mℹ\u001B[39m Using \u001B[34m\u001B[34m\"','\"\u001B[34m\u001B[39m as decimal and \u001B[34m\u001B[34m\"'.'\"\u001B[34m\u001B[39m as grouping mark. Use `read_delim()` for more control.\n\r\u001B[1mindexing\u001B[0m \u001B[34mwinter_survival.csv\u001B[0m [==================================================] \u001B[32m213.96MB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r                                                                                                                                         \r\u001B[1mRows: \u001B[22m\u001B[34m185\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m6\u001B[39m\n\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m──────────────────────────────────────────────────────────────────────────────\u001B[39m\n\u001B[1mDelimiter:\u001B[22m \";\"\n\u001B[31mchr\u001B[39m (2): Spec, dominant\n\u001B[32mdbl\u001B[39m (4): Year, Type, survival_rate, survival\n",
        "\n\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n",
        "> ",
        "type_of_dynamic <- read_csv2(\"initial_data/numbers/type_of_dynamic.csv\") |> ",
        "+ ",
        "  select(-Numbers)",
        "\u001B[36mℹ\u001B[39m Using \u001B[34m\u001B[34m\"','\"\u001B[34m\u001B[39m as decimal and \u001B[34m\u001B[34m\"'.'\"\u001B[34m\u001B[39m as grouping mark. Use `read_delim()` for more control.\n\r\u001B[1mindexing\u001B[0m \u001B[34mtype_of_dynamic.csv\u001B[0m [==================================================] \u001B[32m496.62MB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r                                                                                                                                         \r\u001B[1mRows: \u001B[22m\u001B[34m350\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m4\u001B[39m\n\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m──────────────────────────────────────────────────────────────────────────────\u001B[39m\n\u001B[1mDelimiter:\u001B[22m \";\"\n\u001B[31mchr\u001B[39m (1): Spec\n\u001B[32mdbl\u001B[39m (3): Year, Numbers, Type\n",
        "\n\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n",
        "> ",
        "",
        "> ",
        "# Import climatic variables --------------------------------------------------",
        "> ",
        "bad_snow <- read_csv2(\"initial_data/climate/cleaned/all_station_bad_snow.csv\") |> ",
        "+ ",
        "  filter(Station == \"Бахта\") |> ",
        "+ ",
        "  select(Year, count)",
        "\u001B[36mℹ\u001B[39m Using \u001B[34m\u001B[34m\"','\"\u001B[34m\u001B[39m as decimal and \u001B[34m\u001B[34m\"'.'\"\u001B[34m\u001B[39m as grouping mark. Use `read_delim()` for more control.\n\r\u001B[1mindexing\u001B[0m \u001B[34mall_station_bad_snow.csv\u001B[0m [=============================================] \u001B[32m370.91MB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r                                                                                                                                         \r\u001B[1mRows: \u001B[22m\u001B[34m153\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m5\u001B[39m\n\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m──────────────────────────────────────────────────────────────────────────────\u001B[39m\n\u001B[1mDelimiter:\u001B[22m \";\"\n\u001B[31mchr\u001B[39m (1): Station\n\u001B[32mdbl\u001B[39m (4): Year, First_half, Last_half, count\n",
        "\n\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n",
        "> ",
        "average_parametr <- read_csv2(\"initial_data/climate/cleaned/monthly_anomaly.csv\") |> ",
        "+ ",
        "  filter(Station == \"bakhta\") |> ",
        "+ ",
        "  filter(Month %in% c(10,11,4,5)) |> ",
        "+ ",
        "  select(Year, Month, Tavg, Sn) |> ",
        "+ ",
        "  pivot_wider(id_cols = Year, values_from = c(Tavg, Sn), names_from = Month) |> ",
        "+ ",
        "  mutate(across(ends_with(c(\"10\", \"11\")), ~lag(.x))) #Месяцы 10,11 сместили на +1 (так как сопоставляем с данными по численности со следующим годом)",
        "\u001B[36mℹ\u001B[39m Using \u001B[34m\u001B[34m\"','\"\u001B[34m\u001B[39m as decimal and \u001B[34m\u001B[34m\"'.'\"\u001B[34m\u001B[39m as grouping mark. Use `read_delim()` for more control.\n\r\u001B[1mindexing\u001B[0m \u001B[34mmonthly_anomaly.csv\u001B[0m [====================================================] \u001B[32m2.15GB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r                                                                                                                                         \r\u001B[1mRows: \u001B[22m\u001B[34m6000\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m36\u001B[39m\n\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m──────────────────────────────────────────────────────────────────────────────\u001B[39m\n\u001B[1mDelimiter:\u001B[22m \";\"\n\u001B[31mchr\u001B[39m  (1): Station\n\u001B[32mdbl\u001B[39m (35): Year, Month, Tavg, Pr, Sn, Tavg_base, Tavg_base_SE, Sn_base, Sn_base_SE, Pr_base, Pr_bas...\n",
        "\n\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n",
        "> ",
        "melt_freeze <- read_csv2(\"initial_data/climate/cleaned/melt_freeze_all_winter.csv\")",
        "\u001B[36mℹ\u001B[39m Using \u001B[34m\u001B[34m\"','\"\u001B[34m\u001B[39m as decimal and \u001B[34m\u001B[34m\"'.'\"\u001B[34m\u001B[39m as grouping mark. Use `read_delim()` for more control.\n\r\u001B[1mindexing\u001B[0m \u001B[34mmelt_freeze_all_winter.csv\u001B[0m [============================================] \u001B[32m29.49MB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r                                                                                                                                         \r\u001B[1mRows: \u001B[22m\u001B[34m47\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m2\u001B[39m\n\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m──────────────────────────────────────────────────────────────────────────────\u001B[39m\n\u001B[1mDelimiter:\u001B[22m \";\"\n\u001B[32mdbl\u001B[39m (2): Year, Melt_freeze\n",
        "\n\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n",
        "> ",
        "",
        "> ",
        "season_by_temperature <- read_csv2(\"initial_data/climate/cleaned/season_by_temperature.csv\") |> ",
        "+ ",
        "  select(Year, Season, Dur_by_temp = Duration) |> ",
        "+ ",
        "  filter(Season %in% c(\"Spring\", \"Autumn\", \"Winter\")) |> ",
        "+ ",
        "  pivot_wider(id_cols = Year, names_from = Season, values_from = Dur_by_temp) |> ",
        "+ ",
        "  mutate(Autumn = lag(Autumn)) |> #Потому что осень влияет на данные след. года",
        "+ ",
        "  mutate(across(everything(), \\(x) case_when(is.na(x) ~ 0, .default = x))) |>  # NA означает 0 (значит переходы были резкими, а не размазанными)",
        "+ ",
        "  select(-Winter)",
        "\u001B[36mℹ\u001B[39m Using \u001B[34m\u001B[34m\"','\"\u001B[34m\u001B[39m as decimal and \u001B[34m\u001B[34m\"'.'\"\u001B[34m\u001B[39m as grouping mark. Use `read_delim()` for more control.\n\r\u001B[1mindexing\u001B[0m \u001B[34mseason_by_temperature.csv\u001B[0m [==============================================] \u001B[32m1.80GB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r                                                                                                                                         \r\u001B[1mRows: \u001B[22m\u001B[34m181\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m14\u001B[39m\n\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m──────────────────────────────────────────────────────────────────────────────\u001B[39m\n\u001B[1mDelimiter:\u001B[22m \";\"\n\u001B[31mchr\u001B[39m  (1): Season\n\u001B[32mdbl\u001B[39m (13): Year, Tavg, Tavg_SE, Pr_sum, Sn_avg, Sn_avg_SE, Duration, start, Tavg_roll_mean, Pr_sum_...\n",
        "\n\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n",
        "> ",
        "",
        "> ",
        "climatic_parametr <- bad_snow |> ",
        "+ ",
        "  full_join(average_parametr, by = \"Year\") |> ",
        "+ ",
        "  full_join(melt_freeze, by = \"Year\") |> ",
        "+ ",
        "  full_join(season_by_temperature, by = \"Year\") |> ",
        "+ ",
        "  arrange(Year) |> ",
        "+ ",
        "  mutate(count = case_when(is.na(count)~0, .default = count))",
        "> ",
        "",
        "> ",
        "rm(bad_snow, average_parametr, melt_freeze, season_by_temperature)",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "# Годы с зимней смертностью > медианного значения  -------------------------------------",
        "> ",
        "type_with_negative_survival_and_climate <- winter_survival |> ",
        "+ ",
        "  left_join(climatic_parametr, by=\"Year\") |>",
        "+ ",
        "  ungroup() |> ",
        "+ ",
        "  filter(survival_rate<median(survival_rate))|> ",
        "+ ",
        "  select(-c(Spec, survival_rate, survival))",
        "> ",
        "",
        "> ",
        "#В какие годы наблюдалась максимальная зимняя смертность?",
        "> ",
        "year_with_max_mortality <- levels(as.factor(type_with_negative_survival_and_climate$Year))",
        "> ",
        "levels(as.factor(type_of_dynamic$Year))",
        " [1] \"1976\" \"1977\" \"1978\" \"1979\" \"1980\" \"1981\" \"1982\" \"1983\" \"1984\" \"1985\" \"1986\" \"1987\" \"1988\" \"1989\"\n[15] \"1990\" \"1991\" \"1992\" \"1993\" \"1994\" \"2008\" \"2009\" \"2010\" \"2011\" \"2012\" \"2013\" \"2014\" \"2015\" \"2016\"\n[29] \"2017\" \"2018\" \"2019\" \"2020\" \"2021\" \"2022\" \"2023\"\n",
        "> ",
        "# метка, когда была максимальная смертность",
        "> ",
        "clim_parametr_with_max_mortality <- climatic_parametr |> ",
        "+ ",
        "  mutate(max_mortality = case_when(",
        "+ ",
        "    Year %in% year_with_max_mortality ~ 1,",
        "+ ",
        "    .default =0",
        "+ ",
        "  ))",
        "> ",
        "View(clim_parametr_with_max_mortality)",
        "> ",
        "write.csv2(clim_parametr_with_max_mortality, \"initial_data/numbers+climate/clim_parametr_with_max_mortality.csv\", row.names = F)",
        "\nRestarting R session...\n\n",
        "> ",
        "library(tidyverse)",
        "── \u001B[1mAttaching core tidyverse packages\u001B[22m ────────────────────────────────────────────── tidyverse 2.0.0 ──\n\u001B[32m✔\u001B[39m \u001B[34mdplyr    \u001B[39m 1.1.4     \u001B[32m✔\u001B[39m \u001B[34mreadr    \u001B[39m 2.1.5\n\u001B[32m✔\u001B[39m \u001B[34mforcats  \u001B[39m 1.0.0     \u001B[32m✔\u001B[39m \u001B[34mstringr  \u001B[39m 1.5.1\n\u001B[32m✔\u001B[39m \u001B[34mggplot2  \u001B[39m 3.5.0     \u001B[32m✔\u001B[39m \u001B[34mtibble   \u001B[39m 3.2.1\n\u001B[32m✔\u001B[39m \u001B[34mlubridate\u001B[39m 1.9.3     \u001B[32m✔\u001B[39m \u001B[34mtidyr    \u001B[39m 1.3.1\n\u001B[32m✔\u001B[39m \u001B[34mpurrr    \u001B[39m 1.0.2     \n",
        "── \u001B[1mConflicts\u001B[22m ──────────────────────────────────────────────────────────────── tidyverse_conflicts() ──\n\u001B[31m✖\u001B[39m \u001B[34mdplyr\u001B[39m::\u001B[32mfilter()\u001B[39m masks \u001B[34mstats\u001B[39m::filter()\n\u001B[31m✖\u001B[39m \u001B[34mdplyr\u001B[39m::\u001B[32mlag()\u001B[39m    masks \u001B[34mstats\u001B[39m::lag()\n\u001B[36mℹ\u001B[39m Use the \u001B]8;;http://conflicted.r-lib.org/\u0007conflicted package\u001B]8;;\u0007 to force all conflicts to become errors\n",
        "> ",
        "library(patchwork)",
        "> ",
        "clim_parametr_with_max_mortal <- read_csv2(\"initial_data/numbers+climate/clim_parametr_with_max_mortality.csv\")",
        "\u001B[36mℹ\u001B[39m Using \u001B[34m\u001B[34m\"','\"\u001B[34m\u001B[39m as decimal and \u001B[34m\u001B[34m\"'.'\"\u001B[34m\u001B[39m as grouping mark. Use `read_delim()` for more control.\n\r\u001B[1mindexing\u001B[0m \u001B[34mclim_parametr_with_max_mortality.csv\u001B[0m [=================================] \u001B[32m242.40MB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r                                                                                                                                         \r\u001B[1mRows: \u001B[22m\u001B[34m63\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m14\u001B[39m\n\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m──────────────────────────────────────────────────────────────────────────────\u001B[39m\n\u001B[1mDelimiter:\u001B[22m \";\"\n\u001B[32mdbl\u001B[39m (14): Year, count, Tavg_4, Tavg_5, Tavg_10, Tavg_11, Sn_4, Sn_5, Sn_10, Sn_11, Melt_freeze, Au...\n",
        "\n\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n",
        "> ",
        "u_test <- function(df){",
        "+ ",
        "  df |> ",
        "+ ",
        "    pivot_longer(cols = -Type, names_to = \"Parametr\", values_to = \"values\") |> ",
        "+ ",
        "    mutate(across(c(Type, Parametr), \\(x) as.factor(x))) |> ",
        "+ ",
        "    mutate(Type = case_when(Type == 0 ~ \"non_cyclic\",",
        "+ ",
        "                            .default = \"cyclic\")) |> ",
        "+ ",
        "    group_by(Type, Parametr) |> ",
        "+ ",
        "    summarise(values = list(values)) |> ",
        "+ ",
        "    spread(Type, values) |>  ",
        "+ ",
        "    group_by(Parametr) |> ",
        "+ ",
        "    mutate(p_value = round(wilcox.test(unlist(cyclic), unlist(non_cyclic))$p.value, 3)) |> ",
        "+ ",
        "    mutate(Pval_adj = p.adjust(p_value, \"BY\")) |> ",
        "+ ",
        "    filter(Pval_adj<0.05)",
        "+ ",
        "}",
        "> ",
        "graph_template <- function(df, sign_parametr, title){",
        "+ ",
        "  df |> ",
        "+ ",
        "    pivot_longer(cols = -Type, names_to = \"Parametr\", values_to = \"values\") |> ",
        "+ ",
        "    mutate(across(c(Type, Parametr), \\(x) as.factor(x))) |> ",
        "+ ",
        "    filter(Parametr %in% sign_parametr) |>",
        "+ ",
        "  mutate(Type = case_when(",
        "+ ",
        "    Type == 1 ~ \"циклические\",",
        "+ ",
        "    .default = \"флуктуации\"",
        "+ ",
        "  )) |> ",
        "+ ",
        "  ggplot(aes(y=values, col = Type))+",
        "+ ",
        "  geom_boxplot()+",
        "+ ",
        "  labs(x = NULL,",
        "+ ",
        "       y = NULL,",
        "+ ",
        "       col = \"Тип динамики\",",
        "+ ",
        "       title = title)+",
        "+ ",
        "  theme_minimal()+",
        "+ ",
        "  theme(legend.position = \"bottom\",",
        "+ ",
        "        legend.position.inside = (c(0.75,0.25)),",
        "+ ",
        "        axis.text.x = element_blank(),",
        "+ ",
        "        strip.placement = \"outside\")",
        "+ ",
        "}",
        "> ",
        "View(clim_parametr_with_max_mortal)",
        "> ",
        "all <- clim_parametr_with_max_mortal |> ",
        "+ ",
        "  rename(Type = max_mortality) |> ",
        "+ ",
        "  select(-Year) |> ",
        "+ ",
        "  u_test()",
        "\u001B[38;5;239m`summarise()` has grouped output by 'Type'. You can override using the `.groups` argument.\u001B[39m\n",
        "Warning message:\n",
        "\u001B[38;5;239mThere were 9 warnings in `mutate()`.\nThe first warning was:\u001B[39m\n\u001B[38;5;239m\u001B[36mℹ\u001B[38;5;239m In argument: `p_value = round(...)`.\n\u001B[36mℹ\u001B[38;5;239m In group 1: `Parametr = Autumn`.\u001B[39m\nCaused by warning in `wilcox.test.default()`:\n\u001B[33m!\u001B[39m не могу подсчитать точное p-значение при наличии повторяющихся наблюдений\n\u001B[38;5;239m\u001B[36mℹ\u001B[38;5;239m Run \u001B]8;;ide:run:dplyr::last_dplyr_warnings()\u0007dplyr::last_dplyr_warnings()\u001B]8;;\u0007 to see the 8 remaining warnings.\u001B[39m \n",
        "> ",
        "# Import ------------------------------------------------------------------",
        "> ",
        "common_spec <- read_csv2(\"initial_data/numbers+climate/common_spec_type_with_neg_survival.csv\")",
        "\u001B[36mℹ\u001B[39m Using \u001B[34m\u001B[34m\"','\"\u001B[34m\u001B[39m as decimal and \u001B[34m\u001B[34m\"'.'\"\u001B[34m\u001B[39m as grouping mark. Use `read_delim()` for more control.\n\r\u001B[1mindexing\u001B[0m \u001B[34mcommon_spec_type_with_neg_survival.csv\u001B[0m [===============================] \u001B[32m417.24MB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r                                                                                                                                         \r\u001B[1mRows: \u001B[22m\u001B[34m67\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m13\u001B[39m\n\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m──────────────────────────────────────────────────────────────────────────────\u001B[39m\n\u001B[1mDelimiter:\u001B[22m \";\"\n\u001B[32mdbl\u001B[39m (13): Type, count, Tavg_4, Tavg_5, Tavg_10, Tavg_11, Sn_4, Sn_5, Sn_10, Sn_11, Melt_freeze, Au...\n",
        "\n\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n",
        "> ",
        "uncommon_spec <- read_csv2(\"initial_data/numbers+climate/uncommon_spec_type_with_neg_survival.csv\")",
        "\u001B[36mℹ\u001B[39m Using \u001B[34m\u001B[34m\"','\"\u001B[34m\u001B[39m as decimal and \u001B[34m\u001B[34m\"'.'\"\u001B[34m\u001B[39m as grouping mark. Use `read_delim()` for more control.\n\r\u001B[1mindexing\u001B[0m \u001B[34muncommon_spec_type_with_neg_survival.csv\u001B[0m [=============================] \u001B[32m168.30MB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r                                                                                                                                         \r\u001B[1mRows: \u001B[22m\u001B[34m25\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m13\u001B[39m\n\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m──────────────────────────────────────────────────────────────────────────────\u001B[39m\n\u001B[1mDelimiter:\u001B[22m \";\"\n\u001B[32mdbl\u001B[39m (13): Type, count, Tavg_4, Tavg_5, Tavg_10, Tavg_11, Sn_4, Sn_5, Sn_10, Sn_11, Melt_freeze, Au...\n",
        "\n\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n",
        "> ",
        "# U-test ------------------------------------------------------------------",
        "> ",
        "total_common_wilcox <- u_test(common_spec)",
        "\u001B[38;5;239m`summarise()` has grouped output by 'Type'. You can override using the `.groups` argument.\u001B[39m\n",
        "Warning message:\n",
        "\u001B[38;5;239mThere were 12 warnings in `mutate()`.\nThe first warning was:\u001B[39m\n\u001B[38;5;239m\u001B[36mℹ\u001B[38;5;239m In argument: `p_value = round(...)`.\n\u001B[36mℹ\u001B[38;5;239m In group 1: `Parametr = Autumn`.\u001B[39m\nCaused by warning in `wilcox.test.default()`:\n\u001B[33m!\u001B[39m не могу подсчитать точное p-значение при наличии повторяющихся наблюдений\n\u001B[38;5;239m\u001B[36mℹ\u001B[38;5;239m Run \u001B]8;;ide:run:dplyr::last_dplyr_warnings()\u0007dplyr::last_dplyr_warnings()\u001B]8;;\u0007 to see the 11 remaining warnings.\u001B[39m \n",
        "> ",
        "total_uncommon_wilcox <- u_test(uncommon_spec)",
        "\u001B[38;5;239m`summarise()` has grouped output by 'Type'. You can override using the `.groups` argument.\u001B[39m\n",
        "Warning message:\n",
        "\u001B[38;5;239mThere were 12 warnings in `mutate()`.\nThe first warning was:\u001B[39m\n\u001B[38;5;239m\u001B[36mℹ\u001B[38;5;239m In argument: `p_value = round(...)`.\n\u001B[36mℹ\u001B[38;5;239m In group 1: `Parametr = Autumn`.\u001B[39m\nCaused by warning in `wilcox.test.default()`:\n\u001B[33m!\u001B[39m не могу подсчитать точное p-значение при наличии повторяющихся наблюдений\n\u001B[38;5;239m\u001B[36mℹ\u001B[38;5;239m Run \u001B]8;;ide:run:dplyr::last_dplyr_warnings()\u0007dplyr::last_dplyr_warnings()\u001B]8;;\u0007 to see the 11 remaining warnings.\u001B[39m \n",
        "> ",
        "View(total_common_wilcox)",
        "> ",
        "View(total_uncommon_wilcox)",
        "> ",
        "View(total_common_wilcox)",
        "> ",
        "View(total_uncommon_wilcox)",
        "> ",
        "# Графики -----------------------------------------------------------------",
        "> ",
        "common_spec_sign_parametr_graph <- graph_template(common_spec,",
        "+ ",
        "               sign_parametr = c(as.character(total_common_wilcox$Parametr)),",
        "+ ",
        "               title = \"Для доминантов\")+",
        "+ ",
        "  facet_wrap(.~Parametr, scales = \"free_y\", ncol=2, strip.position = \"left\", ",
        "+ ",
        "             labeller = as_labeller(",
        "+ ",
        "               c(count = \"Кол-во дней, когда \\n снег покрывал <50% \\n поверхн. почвы\",",
        "+ ",
        "                Sn_4 = \"Глубина снега \\n в апреле, см\",",
        "+ ",
        "                Sn_5 = \"Глубина снега \\n в мае, см\", Sn_9 = \"Глубина снега \\n в сентябре, см\",",
        "+ ",
        "                Tavg_4 = \"Средняя t \\n  апреля, \\u00B0C\")))+",
        "+ ",
        "  theme(legend.position = \"none\")",
        "> ",
        "uncommon_spec_sign_parametr_graph <- graph_template(uncommon_spec,",
        "+ ",
        "                sign_parametr = c(as.character(total_uncommon_wilcox$Parametr)),",
        "+ ",
        "                title = \"Для субдоминантов\")+",
        "+ ",
        "  facet_wrap(.~Parametr, scales = \"free_y\", ncol=2, strip.position = \"left\",",
        "+ ",
        "             labeller = as_labeller(c(Spring = \"Продолжительность \\n климатической весны, дней\",",
        "+ ",
        "                         Tavg_4 = \"Средняя t \\n  апреля, \\u00B0C\") ))",
        "> ",
        "boxplot_for_common_and_uncommon <- common_spec_sign_parametr_graph / uncommon_spec_sign_parametr_graph +",
        "+ ",
        "  plot_layout(heights = c(2, 1))",
        "> ",
        "boxplot_for_common_and_uncommon",
        "> ",
        "View(common_spec)",
        "> ",
        "View(uncommon_spec)",
        "\nRestarting R session...\n\n",
        "> ",
        "source(\"A:/disser_calculation_new/scripts/climate+numbers/1_data_preparing.R\")",
        "── \u001B[1mAttaching core tidyverse packages\u001B[22m ────────────────────────────────────────────── tidyverse 2.0.0 ──\n\u001B[32m✔\u001B[39m \u001B[34mdplyr    \u001B[39m 1.1.4     \u001B[32m✔\u001B[39m \u001B[34mreadr    \u001B[39m 2.1.5\n\u001B[32m✔\u001B[39m \u001B[34mforcats  \u001B[39m 1.0.0     \u001B[32m✔\u001B[39m \u001B[34mstringr  \u001B[39m 1.5.1\n\u001B[32m✔\u001B[39m \u001B[34mggplot2  \u001B[39m 3.5.0     \u001B[32m✔\u001B[39m \u001B[34mtibble   \u001B[39m 3.2.1\n\u001B[32m✔\u001B[39m \u001B[34mlubridate\u001B[39m 1.9.3     \u001B[32m✔\u001B[39m \u001B[34mtidyr    \u001B[39m 1.3.1\n\u001B[32m✔\u001B[39m \u001B[34mpurrr    \u001B[39m 1.0.2     \n",
        "── \u001B[1mConflicts\u001B[22m ──────────────────────────────────────────────────────────────── tidyverse_conflicts() ──\n\u001B[31m✖\u001B[39m \u001B[34mdplyr\u001B[39m::\u001B[32mfilter()\u001B[39m masks \u001B[34mstats\u001B[39m::filter()\n\u001B[31m✖\u001B[39m \u001B[34mdplyr\u001B[39m::\u001B[32mlag()\u001B[39m    masks \u001B[34mstats\u001B[39m::lag()\n\u001B[36mℹ\u001B[39m Use the \u001B]8;;http://conflicted.r-lib.org/\u0007conflicted package\u001B]8;;\u0007 to force all conflicts to become errors\n",
        "\u001B[36mℹ\u001B[39m Using \u001B[34m\u001B[34m\"','\"\u001B[34m\u001B[39m as decimal and \u001B[34m\u001B[34m\"'.'\"\u001B[34m\u001B[39m as grouping mark. Use `read_delim()` for more control.\n\r\u001B[1mindexing\u001B[0m \u001B[34mwinter_survival.csv\u001B[0m [==================================================] \u001B[32m192.67MB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r                                                                                                                                         \r\u001B[1mRows: \u001B[22m\u001B[34m185\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m6\u001B[39m\n\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m──────────────────────────────────────────────────────────────────────────────\u001B[39m\n\u001B[1mDelimiter:\u001B[22m \";\"\n\u001B[31mchr\u001B[39m (2): Spec, dominant\n\u001B[32mdbl\u001B[39m (4): Year, Type, survival_rate, survival\n",
        "\n\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001B[36mℹ\u001B[39m Using \u001B[34m\u001B[34m\"','\"\u001B[34m\u001B[39m as decimal and \u001B[34m\u001B[34m\"'.'\"\u001B[34m\u001B[39m as grouping mark. Use `read_delim()` for more control.\n\r\u001B[1mindexing\u001B[0m \u001B[34mtype_of_dynamic.csv\u001B[0m [==================================================] \u001B[32m452.61MB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r                                                                                                                                         ",
        "\r\u001B[1mRows: \u001B[22m\u001B[34m350\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m4\u001B[39m\n\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m──────────────────────────────────────────────────────────────────────────────\u001B[39m\n\u001B[1mDelimiter:\u001B[22m \";\"\n\u001B[31mchr\u001B[39m (1): Spec\n\u001B[32mdbl\u001B[39m (3): Year, Numbers, Type\n\n\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n",
        "\u001B[36mℹ\u001B[39m Using \u001B[34m\u001B[34m\"','\"\u001B[34m\u001B[39m as decimal and \u001B[34m\u001B[34m\"'.'\"\u001B[34m\u001B[39m as grouping mark. Use `read_delim()` for more control.\n\r\u001B[1mindexing\u001B[0m \u001B[34mall_station_bad_snow.csv\u001B[0m [=============================================] \u001B[32m343.93MB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r                                                                                                                                         \r\u001B[1mRows: \u001B[22m\u001B[34m153\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m5\u001B[39m\n\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m──────────────────────────────────────────────────────────────────────────────\u001B[39m\n\u001B[1mDelimiter:\u001B[22m \";\"\n\u001B[31mchr\u001B[39m (1): Station\n\u001B[32mdbl\u001B[39m (4): Year, First_half, Last_half, count\n",
        "\n\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001B[36mℹ\u001B[39m Using \u001B[34m\u001B[34m\"','\"\u001B[34m\u001B[39m as decimal and \u001B[34m\u001B[34m\"'.'\"\u001B[34m\u001B[39m as grouping mark. Use `read_delim()` for more control.\n\r\u001B[1mindexing\u001B[0m \u001B[34mmonthly_anomaly.csv\u001B[0m [===========================================---------] \u001B[32m2.15GB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r\u001B[1mindexing\u001B[0m \u001B[34mmonthly_anomaly.csv\u001B[0m [====================================================] \u001B[32m1.54GB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m",
        "\r                                                                                                                                         \r\u001B[1mRows: \u001B[22m\u001B[34m6000\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m36\u001B[39m\n\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m──────────────────────────────────────────────────────────────────────────────\u001B[39m\n\u001B[1mDelimiter:\u001B[22m \";\"\n\u001B[31mchr\u001B[39m  (1): Station\n\u001B[32mdbl\u001B[39m (35): Year, Month, Tavg, Pr, Sn, Tavg_base, Tavg_base_SE, Sn_base, Sn_base_SE, Pr_base, Pr_bas...\n",
        "\n\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001B[36mℹ\u001B[39m Using \u001B[34m\u001B[34m\"','\"\u001B[34m\u001B[39m as decimal and \u001B[34m\u001B[34m\"'.'\"\u001B[34m\u001B[39m as grouping mark. Use `read_delim()` for more control.\n\r\u001B[1mindexing\u001B[0m \u001B[34mmelt_freeze_all_winter.csv\u001B[0m [============================================] \u001B[32m29.49MB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r                                                                                                                                         ",
        "\r\u001B[1mRows: \u001B[22m\u001B[34m47\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m2\u001B[39m\n\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m──────────────────────────────────────────────────────────────────────────────\u001B[39m\n\u001B[1mDelimiter:\u001B[22m \";\"\n\u001B[32mdbl\u001B[39m (2): Year, Melt_freeze\n\n\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n",
        "\u001B[36mℹ\u001B[39m Using \u001B[34m\u001B[34m\"','\"\u001B[34m\u001B[39m as decimal and \u001B[34m\u001B[34m\"'.'\"\u001B[34m\u001B[39m as grouping mark. Use `read_delim()` for more control.\n\r\u001B[1mindexing\u001B[0m \u001B[34mseason_by_temperature.csv\u001B[0m [==============================================] \u001B[32m1.50GB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r                                                                                                                                         \r\u001B[1mRows: \u001B[22m\u001B[34m181\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m14\u001B[39m\n\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m──────────────────────────────────────────────────────────────────────────────\u001B[39m\n\u001B[1mDelimiter:\u001B[22m \";\"\n\u001B[31mchr\u001B[39m  (1): Season\n\u001B[32mdbl\u001B[39m (13): Year, Tavg, Tavg_SE, Pr_sum, Sn_avg, Sn_avg_SE, Duration, start, Tavg_roll_mean, Pr_sum_...\n",
        "\n\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\r\u001B[1mwrote\u001B[0m \u001B[32m2.65kB\u001B[0m in \u001B[36m 0s\u001B[0m, \u001B[32m85.47MB/s\u001B[0m\r                                                                                                    \r\u001B[1mwrote\u001B[0m \u001B[32m2.15GB\u001B[0m in \u001B[36m 0s\u001B[0m, \u001B[32m2.15GB/s\u001B[0m\r                                                                                                    ",
        "\r",
        "> ",
        "View(type_of_dynamic_with_climate)",
        "> ",
        "type_of_dynamic_for_u_test <- type_of_dynamic |> ",
        "+ ",
        "  left_join(climatic_parametr, by = \"Year\")",
        "> ",
        "View(type_of_dynamic_for_u_test)",
        "> ",
        "type_of_dynamic_for_u_test <- type_of_dynamic |> ",
        "+ ",
        "  left_join(climatic_parametr, by = \"Year\") |> ",
        "+ ",
        "  filter(is.na(Autumn)==F)",
        "> ",
        "View(type_of_dynamic_for_u_test)",
        "> ",
        "View(type_of_dynamic_for_u_test)",
        "> ",
        "type_of_dynamic_for_u_test <- type_of_dynamic |> ",
        "+ ",
        "  left_join(climatic_parametr, by = \"Year\") |> ",
        "+ ",
        "  filter(is.na(Autumn)==F) |> ",
        "+ ",
        "  mutate(dominant = case_when(",
        "+ ",
        "    Spec %in% c(\"S._araneus\",\"S._caecutiens\", \"C._rutilus\", \"M._oeconomus\") ~ \"common_spec\",",
        "+ ",
        "    .default = \"uncommon\"",
        "+ ",
        "  ))",
        "> ",
        "View(type_of_dynamic_for_u_test)",
        "> ",
        "type_of_dynamic_for_u_test <- type_of_dynamic |> ",
        "+ ",
        "  left_join(climatic_parametr, by = \"Year\") |> ",
        "+ ",
        "  filter(is.na(Autumn)==F) |> ",
        "+ ",
        "  mutate(dominant = case_when(",
        "+ ",
        "    Spec %in% c(\"S._araneus\",\"S._caecutiens\", \"C._rutilus\", \"M._oeconomus\") ~ \"common_spec\",",
        "+ ",
        "    .default = \"uncommon\"",
        "+ ",
        "  )) |> ",
        "+ ",
        "  select(-c(Year, Spec))",
        "> ",
        "View(type_of_dynamic_for_u_test)",
        "> ",
        "write_csv2(type_of_dynamic_for_u_test, \"initial_data/numbers+climate/type_of_dynamic_for_u_test.csv\")",
        "\r\u001B[1mwrote\u001B[0m \u001B[32m2.70kB\u001B[0m in \u001B[36m 0s\u001B[0m, \u001B[32m89.78MB/s\u001B[0m\r                                                                                                    \r\u001B[1mwrote\u001B[0m \u001B[32m2.15GB\u001B[0m in \u001B[36m 0s\u001B[0m, \u001B[32m2.15GB/s\u001B[0m\r                                                                                                    \r\nRestarting R session...\n\n"
    ]
}